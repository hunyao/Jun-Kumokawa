{"version":3,"file":"static/js/833.c7b508fa.chunk.js","mappings":"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","sources":["components/Loading.tsx","contexts/repository.tsx","plugins/Octokit.tsx"],"sourcesContent":["import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\n\ninterface LoadingProps {\n  loading: boolean\n}\nconst Loading: React.FC<LoadingProps> = (props) => {\n  const {\n    children,\n    loading\n  } = props;\n\n  if (loading) {\n    return <Grid\n      container\n      justifyContent=\"center\"\n      p={2}\n      flexDirection=\"column\"\n    >\n      <Grid item textAlign=\"center\">\n        <CircularProgress\n          data-testid=\"loading-circular-progress\"\n        />\n      </Grid>\n      <Grid item textAlign=\"center\">\n        Loading....\n      </Grid>\n    </Grid>\n  } else {\n    return <>{children}</>\n  }\n\n}\n\nexport default Loading;\n","import React from 'react';\nimport { Octokit } from '@octokit/rest'\nimport { GetResponseDataTypeFromEndpointMethod, } from \"@octokit/types\";\nimport { OctokitInstance } from './../plugins/Octokit';\nimport Loading from '../components/Loading'\n\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\nconst octokit = new Octokit();\nexport type GithubGetRepositoryResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.get\n>\nexport type GithubGetBranchResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getBranch\n>\nexport type GithubListRepositoryTagsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listTags\n  >\n>\nexport type GithubListCommitsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listCommits\n  >\n>\nexport type GithubGetTreeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.git.getTree\n>\nexport type GithubGetRepositoryReadmeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getReadme\n>\nexport interface RepositoryData {\n  repository: GithubGetRepositoryResponseType | null,\n  branches: Array<GithubGetBranchResponseType>,\n  tags: Array<GithubListRepositoryTagsResponseType>,\n  commits: Array<GithubListCommitsResponseType>,\n}\nexport interface RepositoryContext {\n  state: RepositoryData,\n  dispatch: React.Dispatch<RepositoryData>,\n  selectedBranch: GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null,\n  changeBranch: React.Dispatch<React.SetStateAction<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>>,\n  allTrees: GithubGetTreeResponseType | null,\n  loading: boolean\n}\n\nconst initialState = {\n  repository: null,\n  branches: [],\n  tags: [],\n  commits: []\n}\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  selectedBranch: null,\n  changeBranch: () => {},\n  allTrees: null,\n  loading: true\n}\nexport const repositoryContext = React.createContext<RepositoryContext>(initialContext);\nexport const { Provider, Consumer } = repositoryContext;\nexport const RepositoryProvider: React.FC = function ({ children }) {\n  const [ state, dispatch ] = React.useState<RepositoryData>(initialState);\n  const [ selectedBranch, changeBranch ] = React.useState<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>(null);\n  const [ allTrees, setAllTrees ] = React.useState<GithubGetTreeResponseType | null>(null);\n  const [ loadingForRepo, setLoadingForRepo ] = React.useState<boolean>(true);\n  const [ loadingForBranch, setLoadingForBranch ] = React.useState<boolean>(true);\n  const [ loadingForTag, setLoadingForTag ] = React.useState<boolean>(true);\n  const [ loadingForCommit, setLoadingForCommit ] = React.useState<boolean>(true);\n  const [ loadingForTree, setLoadingForTree ] = React.useState<boolean>(true);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  async function getAllData<T>(uri: string): Promise<Array<T>> {\n    let p = 1\n    let arr: Array<T> = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data }: { data: GithubGetRepositoryResponseType } = repository;\n      dispatch((prev) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n    .then(() => setLoadingForRepo(false));\n  }, [])\n\n  React.useEffect(() => {\n    getAllData<GithubGetBranchResponseType>('GET /repos/{owner}/{repo}/branches')\n    .then(branches => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n    .then(() => setLoadingForBranch(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListRepositoryTagsResponseType>('GET /repos/{owner}/{repo}/tags')\n    .then((tags) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n    .then(() => setLoadingForTag(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListCommitsResponseType>('GET /repos/{owner}/{repo}/commits')\n    .then((commits) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n    .then(() => setLoadingForCommit(false));\n  }, [])\n  React.useEffect(() => {\n    if (state.repository === null) {\n      return;\n    }\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find(b => b.name === state.repository?.default_branch) as GithubGetBranchResponseType)\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    setLoadingForTree(true);\n    const branch = selectedBranch as GithubGetBranchResponseType | null;\n    if (branch === null || branch === undefined) {\n      return;\n    }\n    if (branch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: branch.commit.sha\n    })\n    .then(({ data }: {data: GithubGetTreeResponseType}) => {\n      setAllTrees(data)\n    })\n    .then(() => setLoadingForTree(false));\n  }, [\n    selectedBranch\n  ])\n\n  React.useEffect(() => {\n    if ([\n      loadingForTag,\n      loadingForTree,\n      loadingForRepo,\n      loadingForBranch,\n      loadingForCommit\n    ].some(Boolean) === true) {\n      if (!loading) {\n        setLoading(true);\n      }\n      return;\n    }\n    setLoading(false);\n  }, [\n    loadingForTag,\n    loadingForTree,\n    loadingForRepo,\n    loadingForBranch,\n    loadingForCommit,\n    loading\n  ])\n\n  return (\n    <>\n      <Loading loading={loading}>\n        <Provider\n          value={{\n            state,\n            dispatch,\n            selectedBranch,\n            changeBranch,\n            allTrees,\n            loading\n          }}\n        >\n          {children}\n        </Provider>\n      </Loading>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n"],"names":["props","children","loading","container","justifyContent","p","flexDirection","item","textAlign","initialState","Octokit","repository","branches","tags","commits","initialContext","state","dispatch","selectedBranch","changeBranch","allTrees","repositoryContext","React","Provider","Consumer","RepositoryProvider","setAllTrees","loadingForRepo","setLoadingForRepo","loadingForBranch","setLoadingForBranch","loadingForTag","setLoadingForTag","loadingForCommit","setLoadingForCommit","loadingForTree","setLoadingForTree","setLoading","getAllData","uri","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","name","branch","commit","sha","tree_sha","some","Boolean","value","auth"],"sourceRoot":""}