{"version":3,"file":"static/js/778.076301f8.chunk.js","mappings":"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","sources":["hooks/useTree.tsx","hooks/useTreeReadme.tsx","pages/home/tree/index.tsx"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport { Unpacked } from '../contexts/repository';\nimport { GithubGetTreeResponseType } from '../contexts/repository';\n\nconst treeCache: {[key: string]: GithubGetTreeResponseType['tree']} = {}\nconst sorting = (a: Unpacked<GithubGetTreeResponseType['tree']>, b: Unpacked<GithubGetTreeResponseType['tree']>) => {\n  if (a.type === undefined || a.path === undefined || b.type === undefined || b.path === undefined) {\n    return 0;\n  }\n  if (a.type !== b.type) {\n    return a.type === \"tree\" ? -1 : 1;\n  }\n  const isDotFileA = a.path[0] === '.';\n  const isDotFileB = b.path[0] === '.';\n  if (isDotFileA !== isDotFileB) {\n    return isDotFileA ? -1 : 1;\n  }\n  const isStartWithUpperCaseA = /^[A-Z]/.test(a.path);\n  const isStartWithUpperCaseB = /^[A-Z]/.test(b.path);\n  if (isStartWithUpperCaseA !== isStartWithUpperCaseB) {\n    return isStartWithUpperCaseA ? -1 : 1;\n  }\n\n  return a.path < b.path ? -1 : 1;\n}\nconst getTree = async (sha: string) => {\n  if (treeCache[sha] !== undefined) {\n    return treeCache[sha]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    tree_sha: sha\n  })\n  .then(({ data }: { data: GithubGetTreeResponseType }) => {\n    data.tree.sort(sorting)\n    treeCache[sha] = data.tree\n    return data.tree\n  })\n}\ntype useTreeResponseType = [\n  GithubGetTreeResponseType['tree'],\n  boolean,\n  boolean\n]\nconst useTree: (sha: string) => useTreeResponseType = (sha: string = '') => {\n  const [ tree, setTree ] = React.useState<GithubGetTreeResponseType['tree']>([]);\n  const [ error, setError ] = React.useState<boolean>(false);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      return;\n    }\n    getTree(sha)\n    .then((data: GithubGetTreeResponseType['tree']) => {\n      setTree(() => {\n        return [\n          ...data\n        ]\n      })\n    })\n    .catch(() => {\n      setTree([]);\n      setError(true)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [sha])\n\n  return [\n    tree,\n    error,\n    loading\n  ]\n}\n\nexport default useTree\n","import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport useShaToPath from './useShaToPath';\nimport useCurrentBranch from './useCurrentBranch'\nimport { GithubGetRepositoryReadmeResponseType } from '../contexts/repository'\n\ntype useTreeReadmeResponseType = [\n  string,\n  boolean,\n  boolean\n]\nconst treeReadmeCache: { [key: string]: string } = {}\nconst getTreeReadme = async (path: string = '', currentBranchName: string) => {\n  if (treeReadmeCache[path] !== undefined) {\n    return treeReadmeCache[path]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/readme/{path}?ref={ref}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      path: path,\n      ref: currentBranchName\n    })\n    .then(({ data }: { data: GithubGetRepositoryReadmeResponseType }) => {\n    treeReadmeCache[path] = data.content;\n    return data.content\n  })\n}\nconst useTreeReadme: (sha: string) => useTreeReadmeResponseType = (sha: string = '') => {\n  const [ content, setContent ] = React.useState<string>('');\n  const [ error, setError ] = React.useState<boolean>(false);\n  const getPathFromSha = useShaToPath();\n  const [ path, err ] = getPathFromSha(sha);\n  const [ currentBranchName ] = useCurrentBranch();\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (err) {\n      setLoading(false);\n      return;\n    }\n    getTreeReadme(path, currentBranchName)\n    .then(data => {\n      setContent(atob(data))\n    })\n    .catch(({code}) => {\n      setContent('')\n      setError(code !== 404)\n    })\n    .finally(() => setLoading(false))\n  }, [\n    sha,\n    path,\n    err,\n    currentBranchName\n  ])\n\n  return [\n    content,\n    error,\n    loading\n  ]\n}\n\nexport default useTreeReadme\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../../components/FileNavigation';\nimport ListDirectory from '../../../components/ListDirectory';\nimport { useParams } from \"react-router-dom\";\nimport FileView from '../../../components/FileView';\nimport Moo from '../../../components/Moo'\nimport useCurrentBranch from '../../../hooks/useCurrentBranch'\nimport useTree from '../../../hooks/useTree'\nimport useTreeReadme from '../../../hooks/useTreeReadme'\nimport Loading from '../../../components/Loading'\n\ninterface TreeProps {\n  mode?: 'navigation' | 'overview'\n}\nconst Tree: React.FC<TreeProps> = (props) => {\n  const params = useParams();\n  const [ sha, setSha ] = React.useState<string>('');\n  const [ trees, treesError, treeLoading ] = useTree(sha);\n  const [ readmeContent, readmeContentError, readmeContentLoading ] = useTreeReadme(sha);\n  const [ , currentBranchSha ] = useCurrentBranch();\n\n  const {\n    mode = 'navigation'\n  } = props;\n\n  React.useEffect(() => {\n    if (params.sha === undefined) {\n      setSha(currentBranchSha)\n    } else {\n      setSha(params.sha)\n    }\n  }, [\n    currentBranchSha,\n    params\n  ])\n\n  if (treesError || readmeContentError) {\n    return <Moo />\n  }\n\n  return (\n    <Loading loading={treeLoading}>\n      <Box>\n        <FileNavigation\n          mode={mode}\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"tree\"\n          sha={sha}\n          trees={trees}\n        />\n        <FileView\n          filename=\"README.md\"\n          content={readmeContent || \"\"}\n          binary={false}\n          image={false}\n          mode=\"readme\"\n          sx={{\n            display: readmeContent !== '' ? 'inherit' : 'none'\n          }}\n          loading={readmeContentLoading}\n        />\n      </Box>\n    </Loading>\n  )\n}\n\nexport default Tree;\n"],"names":["treeCache","sorting","a","b","undefined","type","path","isDotFileA","isStartWithUpperCaseA","test","getTree","sha","OctokitInstance","owner","process","repo","tree_sha","then","data","tree","sort","React","setTree","error","setError","loading","setLoading","catch","finally","treeReadmeCache","getTreeReadme","currentBranchName","ref","content","setContent","useShaToPath","getPathFromSha","err","useCurrentBranch","atob","code","props","params","useParams","setSha","useTree","trees","treesError","treeLoading","useTreeReadme","readmeContent","readmeContentError","readmeContentLoading","currentBranchSha","mode","Moo","Loading","Box","FileNavigation","ListDirectory","FileView","filename","binary","image","sx","display"],"sourceRoot":""}