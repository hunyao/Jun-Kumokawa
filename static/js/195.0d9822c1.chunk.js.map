{"version":3,"file":"static/js/195.0d9822c1.chunk.js","mappings":"gQAuGA,UA5FiB,WACf,MAAgCA,EAAAA,SAAe,IAA/C,eAAQC,EAAR,KAAiBC,EAAjB,KACA,EAAkCF,EAAAA,UAAe,GAAjD,eAAQG,EAAR,KAAkBC,EAAlB,KACA,EAAgCJ,EAAAA,UAAe,GAA/C,eAAQK,EAAR,KAAiBC,EAAjB,KACA,EAAkCN,EAAAA,SAAe,IAAjD,eAAQO,EAAR,KAAkBC,EAAlB,KACA,EAA0BR,EAAAA,SAAe,IAAzC,eAAQS,EAAR,KAAcC,EAAd,KACA,EAAgCV,EAAAA,UAAe,GAA/C,eAAQW,EAAR,KAAiBC,EAAjB,KACA,EAA4BZ,EAAAA,UAAe,GAA3C,eAAQa,EAAR,KAAeC,EAAf,KACA,GAAqBC,EAAAA,EAAAA,MAAbC,IAAAA,OAAR,MAAc,GAAd,EACMC,GAAiBC,EAAAA,EAAAA,KAqDvB,OAnDAlB,EAAAA,WAAgB,WACd,MAAiBiB,EAAeD,GAAxBG,GAAR,eACAX,EAAYW,KACX,CACDF,EACAD,IAGFhB,EAAAA,WAAgB,WACd,IAAIoB,GAAU,EAmCd,OAlCAC,EAAAA,EAAAA,QAAwB,iDAAkD,CACxEC,MAAOC,SACPC,KAAMD,eACNE,SAAUT,IAEXU,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP,GAAIP,EAEF,OADAlB,EAAW0B,KAAKD,EAAK1B,UACd4B,MAAM,yBAA2BF,EAAK1B,SAC5CyB,MAAK,SAAAI,GACJ,OAAOA,EAAQC,UACdL,MAAK,SAAAI,GACN,OAAOE,EAAAA,EAAAA,UAASF,SAIrBJ,MAAK,SAACO,GACDb,SACUc,IAARD,GACF7B,GAAY,GACZE,GAAW,GACXI,EAAQ,gBAERN,GAAY,GACZE,EAAW,WAAW6B,KAAKF,EAAIxB,OAC/BC,EAAQuB,EAAIxB,WAIjB2B,OAAM,SAAAC,GACLvB,GAAS,MAEVwB,SAAQ,kBAAM1B,GAAW,MAEnB,WACLQ,GAAU,KAEX,CACDJ,IAGEH,GACK,SAAC,IAAD,KAIP,+BACE,UAAC,IAAD,YACE,SAAC,IAAD,CACE0B,KAAK,aACLvB,IAAKA,KAEP,SAAC,IAAD,CACEwB,KAAK,OACLxB,IAAKA,EACLyB,MAAO,MAET,SAAC,IAAD,CACElC,SAAUA,EACVN,QAASA,EACTyC,OAAQvC,EACRwC,MAAOtC,EACPI,KAAMA,EACN8B,KAAK,aACL5B,QAASA,W","sources":["pages/home/blob/index.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../../components/FileNavigation';\nimport ListDirectory from '../../../components/ListDirectory';\nimport FileView from '../../../components/FileView';\nimport { useParams } from \"react-router-dom\";\nimport { OctokitInstance } from '../../../plugins/Octokit';\nimport { fromBlob } from 'file-type/browser';\nimport Moo from '../../../components/Moo';\nimport useShaToPath from '../../../hooks/useShaToPath'\n\nconst BlobPage = () => {\n  const [ content, setContent ] = React.useState(\"\");\n  const [ isBinary, setIsBinary ] = React.useState(false);\n  const [ isImage, setIsImage ] = React.useState(false);\n  const [ filename, setFilename ] = React.useState(\"\");\n  const [ mime, setMime ] = React.useState(\"\");\n  const [ loading, setLoading ] = React.useState(true);\n  const [ error, setError ] = React.useState(false);\n  const { sha = '' } = useParams();\n  const getPathFromSha = useShaToPath();\n\n  React.useEffect(() => {\n    const [ path ] = getPathFromSha(sha)\n    setFilename(path)\n  }, [\n    getPathFromSha,\n    sha\n  ])\n\n  React.useEffect(() => {\n    let mounted = true;\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      file_sha: sha\n    })\n    .then(({ data }) => {\n      if (mounted) {\n        setContent(atob(data.content));\n        return fetch(\"data:image/png;base64,\" + data.content)\n        .then(fetched => {\n          return fetched.blob()\n        }).then(fetched => {\n          return fromBlob(fetched)\n        })\n      }\n    })\n    .then((res: any) => {\n      if (mounted) {\n        if (res === undefined) {\n          setIsBinary(false);\n          setIsImage(false);\n          setMime('text/plain')\n        } else {\n          setIsBinary(true)\n          setIsImage(/^image\\//.test(res.mime))\n          setMime(res.mime)\n        }\n      }\n    })\n    .catch(err => {\n      setError(true)\n    })\n    .finally(() => setLoading(false))\n\n    return () => {\n      mounted = false;\n    }\n  }, [\n    sha\n  ])\n\n  if (error) {\n    return <Moo />\n  }\n\n  return (\n    <>\n      <Box>\n        <FileNavigation\n          mode=\"navigation\"\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"blob\"\n          sha={sha}\n          trees={[]}\n        />\n        <FileView\n          filename={filename}\n          content={content}\n          binary={isBinary}\n          image={isImage}\n          mime={mime}\n          mode=\"sourceCode\"\n          loading={loading}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default BlobPage;\n"],"names":["React","content","setContent","isBinary","setIsBinary","isImage","setIsImage","filename","setFilename","mime","setMime","loading","setLoading","error","setError","useParams","sha","getPathFromSha","useShaToPath","path","mounted","OctokitInstance","owner","process","repo","file_sha","then","data","atob","fetch","fetched","blob","fromBlob","res","undefined","test","catch","err","finally","mode","type","trees","binary","image"],"sourceRoot":""}