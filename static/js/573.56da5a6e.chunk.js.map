{"version":3,"file":"static/js/573.56da5a6e.chunk.js","mappings":"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","sources":["contexts/repository.tsx","hooks/usePathToSha.tsx","components/ui/TreeBrowserListItem.tsx","hooks/useFilterTrees.tsx","pages/home/find.tsx","plugins/Octokit.tsx","../node_modules/@mui/icons-material/ArrowForwardIos.js"],"sourcesContent":["import React from 'react';\nimport { Octokit } from '@octokit/rest'\nimport { GetResponseDataTypeFromEndpointMethod, } from \"@octokit/types\";\nimport { OctokitInstance } from './../plugins/Octokit';\n\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\nconst octokit = new Octokit();\nexport type GithubGetRepositoryResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.get\n>\nexport type GithubGetBranchResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getBranch\n>\nexport type GithubListRepositoryTagsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listTags\n  >\n>\nexport type GithubListCommitsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listCommits\n  >\n>\nexport type GithubGetTreeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.git.getTree\n>\nexport type GithubGetRepositoryReadmeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getReadme\n>\nexport interface RepositoryData {\n  repository: GithubGetRepositoryResponseType | null,\n  branches: Array<GithubGetBranchResponseType>,\n  tags: Array<GithubListRepositoryTagsResponseType>,\n  commits: Array<GithubListCommitsResponseType>,\n}\nexport interface RepositoryContext {\n  state: RepositoryData,\n  dispatch: React.Dispatch<RepositoryData>,\n  selectedBranch: GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null,\n  changeBranch: React.Dispatch<React.SetStateAction<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>>,\n  allTrees: GithubGetTreeResponseType | null\n}\n\nconst initialState = {\n  repository: null,\n  branches: [],\n  tags: [],\n  commits: []\n}\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  selectedBranch: null,\n  changeBranch: () => {},\n  allTrees: null\n}\nexport const repositoryContext = React.createContext<RepositoryContext>(initialContext);\nexport const { Provider, Consumer } = repositoryContext;\nexport const RepositoryProvider: React.FC = function ({ children }) {\n  const [ state, dispatch ] = React.useState<RepositoryData>(initialState);\n  const [ selectedBranch, changeBranch ] = React.useState<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>(null);\n  const [ allTrees, setAllTrees ] = React.useState<GithubGetTreeResponseType | null>(null);\n\n  async function getAllData<T>(uri: string): Promise<Array<T>> {\n    let p = 1\n    let arr: Array<T> = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data }: { data: GithubGetRepositoryResponseType } = repository;\n      dispatch((prev) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n  }, [])\n\n  React.useEffect(() => {\n    getAllData<GithubGetBranchResponseType>('GET /repos/{owner}/{repo}/branches')\n    .then(branches => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListRepositoryTagsResponseType>('GET /repos/{owner}/{repo}/tags')\n    .then((tags) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListCommitsResponseType>('GET /repos/{owner}/{repo}/commits')\n    .then((commits) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    if (state.repository === null) {\n      return;\n    }\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find(b => b.name === state.repository?.default_branch) as GithubGetBranchResponseType)\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    const branch = selectedBranch as GithubGetBranchResponseType | null;\n    if (branch === null || branch === undefined) {\n      return;\n    }\n    if (branch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: branch.commit.sha\n    })\n    .then(({ data }: {data: GithubGetTreeResponseType}) => {\n      setAllTrees(data)\n    })\n  }, [\n    selectedBranch\n  ])\n\n  return (\n    <>\n      <Provider\n        value={{\n          state,\n          dispatch,\n          selectedBranch,\n          changeBranch,\n          allTrees,\n        }}>\n        {children}\n      </Provider>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import React from 'react';\nimport { repositoryContext } from '../contexts/repository';\n\ntype usePathToShaType = string | undefined;\nconst usePathToSha: () => (path: string) => usePathToShaType = () => {\n  const {\n    allTrees\n  } = React.useContext(repositoryContext);\n\n  const getShaFromPath = React.useCallback((path: string) => {\n    if (allTrees === null) {\n      return;\n    }\n    if (allTrees.tree.length === 0) {\n      return;\n    }\n    const result = allTrees.tree.find(t => {\n      return t.path === path\n    });\n    if (result === undefined) {\n      return ''\n    }\n    return result.sha\n  }, [\n    allTrees\n  ])\n\n  return getShaFromPath\n}\n\nexport default usePathToSha\n","import React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport { ListItemProps } from '@mui/material/ListItem';\nimport { styled } from '@mui/material/styles';\n\ninterface TreeBrowserListItemUIProps {}\nconst TreeBrowserListItem = styled(React.forwardRef<HTMLLIElement, ListItemProps<'li', TreeBrowserListItemUIProps>>(({className, ...rest}, ref) => (\n  <ListItem className={className + \" tree-browser-list-item\"} ref={ref} {...rest} />\n)))`\n& {\n  padding: 8px 4px;\n  color: #8b949e;\n  user-select: none;\n  margin: 1px;\n  background: #0d1117;\n  width: calc(100% - 2px);\n}\n& > .tree-browser-list-item-label {\n  margin-left: 4px;\n  color: #58a6ff;\n}\n&.active {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&.active > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n&:hover {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&:hover > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n`\n\nexport default TreeBrowserListItem\n","import React from 'react'\nimport { repositoryContext } from '../contexts/repository';\n\ntype useFilterTreesType = [\n  Array<string>\n]\nconst useFilterTrees: (filteringText: string) => useFilterTreesType = (filteringText: string = '') => {\n  const {\n    allTrees,\n  } = React.useContext(repositoryContext)\n\n  return [\n    React.useMemo(() => {\n      if (allTrees === null) {\n        return [];\n      }\n      if (allTrees.tree.length === 0) {\n        return [];\n      }\n      return allTrees.tree\n      .filter(t => t.type === 'blob')\n      .filter(t => t.path !== undefined)\n      .map(t => t.path as string)\n      .filter(path => {\n        return path.toUpperCase().includes(filteringText.toUpperCase())\n      })\n      .slice(0, 50)\n    }, [\n      filteringText,\n      allTrees\n    ])\n  ]\n}\n\nexport default useFilterTrees\n","import React from 'react'\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport GithubLink from '../../components/ui/GithubLink'\nimport InputBase from '@mui/material/InputBase';\nimport List from '@mui/material/List';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined';\nimport { useNavigate } from \"react-router-dom\";\nimport TreeBrowserListItem from '../../components/ui/TreeBrowserListItem';\nimport usePathToSha from '../../hooks/usePathToSha'\nimport useFilterTrees from '../../hooks/useFilterTrees'\n\nconst Find = () => {\n  const [ searchText, setSearchText ] = React.useState<string>(\"\");\n  const [ activeRow, setActiveRow ] = React.useState<number>(0);\n  const [ filteredTrees ] = useFilterTrees(searchText);\n  const getShaFromPath = usePathToSha();\n  const navigate = useNavigate();\n\n  const handleKeydown = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n    let n = activeRow;\n    if (key === \"ArrowDown\") {\n      n += 1;\n    } else if (key === \"ArrowUp\") {\n      n -= 1;\n    } else if (key === \"Enter\") {\n      navigate('/blob/' + getShaFromPath(filteredTrees[activeRow]))\n    } else {}\n\n    n = n < 0 ? 0 : n;\n    n = n >= filteredTrees.length ? filteredTrees.length-1 : n;\n\n    setActiveRow(n);\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        mt={4}\n        sx={{\n          whiteSpace: 'pre',\n          fontSize: 16\n        }}\n      >\n        <GithubLink\n          href=\"#\"\n          className=\"active\"\n        >\n          {process.env.REACT_APP_REPOSITORY_NAME}\n        </GithubLink> / <InputBase\n          autoFocus\n          fullWidth\n          onKeyDown={handleKeydown}\n          onChange={({target: { value }}) => setSearchText(value)}\n        />\n      </Box>\n      <List\n        disablePadding\n        sx={{\n          background: '#30363d',\n        }}\n      >\n        {filteredTrees\n          .map((tree, index) => (\n          <TreeBrowserListItem\n            disablePadding\n            className={index === activeRow ? 'active': ''}\n            onClick={() => navigate('/blob/' + getShaFromPath(tree))}\n          >\n            <SvgIcon\n              component={ArrowForwardIosIcon}\n              sx={{\n                fontSize: 16,\n                marginX: 1,\n                visibility: index === activeRow ? 'visible': 'hidden'\n              }}\n            />\n            <SvgIcon\n              component={InsertDriveFileOutlinedIcon}\n              sx={{ fontSize: 16 }}\n            />\n            <Typography\n              component=\"span\"\n              display=\"inline-block\"\n              className=\"tree-browser-list-item-label\"\n            >\n              {tree}\n            </Typography>\n          </TreeBrowserListItem>\n        ))}\n      </List>\n    </>\n  )\n}\n\nexport default Find;\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z\"\n}), 'ArrowForwardIos');\nexports.default = _default;"],"names":["initialState","Octokit","repository","branches","tags","commits","initialContext","state","dispatch","selectedBranch","changeBranch","allTrees","repositoryContext","React","Provider","Consumer","RepositoryProvider","children","setAllTrees","getAllData","uri","p","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","name","branch","commit","sha","tree_sha","value","path","tree","result","t","styled","ref","className","rest","ListItem","filteringText","filter","type","map","toUpperCase","includes","slice","searchText","setSearchText","activeRow","setActiveRow","useFilterTrees","filteredTrees","getShaFromPath","usePathToSha","navigate","useNavigate","Box","display","alignItems","mt","sx","whiteSpace","fontSize","GithubLink","href","InputBase","autoFocus","fullWidth","onKeyDown","key","n","onChange","target","List","disablePadding","background","index","onClick","SvgIcon","component","ArrowForwardIosIcon","marginX","visibility","InsertDriveFileOutlinedIcon","Typography","auth","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}