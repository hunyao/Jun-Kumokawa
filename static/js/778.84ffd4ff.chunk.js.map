{"version":3,"file":"static/js/778.84ffd4ff.chunk.js","mappings":"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","sources":["hooks/useTree.tsx","hooks/useTreeReadme.tsx","pages/home/tree/index.tsx"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\n\nconst treeCache: any = {}\nconst sorting = (a: any, b: any) => {\n  if (a.type !== b.type) {\n    return a.type === \"tree\" ? -1 : 1;\n  }\n  const isDotFileA = a.path[0] === '.';\n  const isDotFileB = b.path[0] === '.';\n  if (isDotFileA !== isDotFileB) {\n    return isDotFileA ? -1 : 1;\n  }\n  const isStartWithUpperCaseA = /^[A-Z]/.test(a.path);\n  const isStartWithUpperCaseB = /^[A-Z]/.test(b.path);\n  if (isStartWithUpperCaseA !== isStartWithUpperCaseB) {\n    return isStartWithUpperCaseA ? -1 : 1;\n  }\n\n  return a.path < b.path ? -1 : 1;\n}\nconst getTree = async (sha: string) => {\n  if (treeCache[sha] !== undefined) {\n    return treeCache[sha]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    tree_sha: sha\n  })\n  .then(({ data }: any) => {\n    data.tree.sort(sorting)\n    treeCache[sha] = data.tree\n    return data.tree\n  })\n}\nconst useTree = (sha: string = '') => {\n  const [ tree, setTree ] = React.useState<any>(null);\n  const [ error, setError ] = React.useState(false);\n  const [ loading, setLoading ] = React.useState(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      return;\n    }\n    getTree(sha)\n    .then(data => {\n      setTree(() => {\n        return [\n          ...data\n        ]\n      })\n    })\n    .catch(() => {\n      setTree([]);\n      setError(true)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [sha])\n\n  return [\n    tree,\n    error,\n    loading\n  ]\n}\n\nexport default useTree\n","import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport useShaToPath from './useShaToPath';\nimport useCurrentBranch from './useCurrentBranch'\n\nconst treeReadmeCache: any = {}\nconst getTreeReadme = async (path: string = '', currentBranchName: string) => {\n  if (treeReadmeCache[path] !== undefined) {\n    return treeReadmeCache[path]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/readme/{path}?ref={ref}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      path: path,\n      ref: currentBranchName\n    })\n  .then(({ data }: any) => {\n    treeReadmeCache[path] = data.content;\n    return data.content\n  })\n}\nconst useTreeReadme = (sha: string = '') => {\n  const [ content, setContent ] = React.useState('');\n  const [ error, setError ] = React.useState(false);\n  const getPathFromSha = useShaToPath();\n  const [ path ] = getPathFromSha(sha);\n  const [ currentBranchName ] = useCurrentBranch();\n  const [ loading, setLoading ] = React.useState(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (path === undefined) {\n      setLoading(false);\n      return;\n    }\n    getTreeReadme(path, currentBranchName)\n    .then(data => {\n      setContent(atob(data))\n    })\n    .catch(({code}) => {\n      setContent('')\n      setError(code !== 404)\n    })\n    .finally(() => setLoading(false))\n  }, [\n    sha,\n    path,\n    currentBranchName\n  ])\n\n  return [\n    content,\n    error,\n    loading\n  ]\n}\n\nexport default useTreeReadme\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../../components/FileNavigation';\nimport ListDirectory from '../../../components/ListDirectory';\nimport { useParams } from \"react-router-dom\";\nimport FileView from '../../../components/FileView';\nimport Moo from '../../../components/Moo'\nimport useCurrentBranch from '../../../hooks/useCurrentBranch'\nimport useTree from '../../../hooks/useTree'\nimport useTreeReadme from '../../../hooks/useTreeReadme'\nimport Loading from '../../../components/Loading'\n\nconst Tree = (props: any) => {\n  const params = useParams();\n  const [ sha, setSha ] = React.useState('');\n  const [ trees, treesError, treeLoading ] = useTree(sha);\n  const [ readmeContent, readmeContentError, readmeContentLoading ] = useTreeReadme(sha);\n  const [ , currentBranchSha ] = useCurrentBranch();\n\n  const {\n    mode = 'navigation'\n  } = props;\n\n  React.useEffect(() => {\n    if (params.sha === undefined) {\n      setSha(currentBranchSha)\n    } else {\n      setSha(params.sha)\n    }\n  }, [\n    currentBranchSha,\n    params\n  ])\n\n  if (treesError || readmeContentError) {\n    return <Moo />\n  }\n\n  return (\n    <Loading loading={treeLoading}>\n      <Box>\n        <FileNavigation\n          mode={mode}\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"tree\"\n          sha={sha}\n          trees={trees}\n        />\n        <FileView\n          filename=\"README.md\"\n          content={readmeContent || \"\"}\n          binary={false}\n          image={false}\n          mode=\"readme\"\n          sx={{\n            display: readmeContent !== '' ? 'inherit' : 'none'\n          }}\n          loading={readmeContentLoading}\n        />\n      </Box>\n    </Loading>\n  )\n}\n\nexport default Tree;\n"],"names":["treeCache","sorting","a","b","type","isDotFileA","path","isStartWithUpperCaseA","test","getTree","sha","undefined","OctokitInstance","owner","process","repo","tree_sha","then","data","tree","sort","React","setTree","error","setError","loading","setLoading","catch","finally","treeReadmeCache","getTreeReadme","currentBranchName","ref","content","setContent","getPathFromSha","useShaToPath","useCurrentBranch","atob","code","props","params","useParams","setSha","useTree","trees","treesError","treeLoading","useTreeReadme","readmeContent","readmeContentError","readmeContentLoading","currentBranchSha","mode","Moo","Loading","Box","FileNavigation","ListDirectory","FileView","filename","binary","image","sx","display"],"sourceRoot":""}