{"version":3,"file":"static/js/573.20e8bd40.chunk.js","mappings":"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","sources":["contexts/repository.tsx","hooks/usePathToSha.tsx","components/ui/TreeBrowserListItem.tsx","hooks/useFilterTrees.tsx","pages/home/find.tsx","plugins/Octokit.tsx","../node_modules/@mui/icons-material/ArrowForwardIos.js"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from './../plugins/Octokit';\n\nexport interface RepositoryInterface {\n  branches: any,\n  tags: any,\n  commits: any,\n}\nexport interface RepositoryBranchInterface {\n  selectedBranch: string\n}\n\nexport const repositoryContext = React.createContext<any>({});\nexport const { Provider, Consumer } = repositoryContext;\n\nconst initial = {\n  repository: {},\n  branches: [],\n  tags: [],\n  commits: []\n}\nexport function RepositoryProvider({ children }: any) {\n  const [ state, dispatch ] = React.useState<any>(initial);\n  const [ selectedBranch, changeBranch ] = React.useState<any>({\n    name: '',\n    commit: {\n      sha: '',\n      url: ''\n    }\n  });\n  const [ allTrees, setAllTrees ] = React.useState<any>([]);\n\n  async function getAllData(uri: string) {\n    let p = 1\n    let arr: any = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data } = repository;\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n  }, [])\n\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/branches')\n    .then((branches: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/tags')\n    .then((tags: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/commits')\n    .then((commits: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find((b: any) => b.name === state.repository.default_branch))\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    if (selectedBranch === undefined) {\n      return;\n    }\n    if (selectedBranch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: selectedBranch.commit.sha\n    })\n    .then(({ data }) => {\n      setAllTrees(data)\n    })\n  }, [\n    selectedBranch\n  ])\n\n  return (\n    <>\n      <Provider\n        value={{\n          state,\n          dispatch,\n          selectedBranch,\n          changeBranch,\n          allTrees,\n        }}>\n        {children}\n      </Provider>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import React from 'react';\nimport { repositoryContext } from '../contexts/repository';\n\nconst usePathToSha = () => {\n  const {\n    allTrees\n  } = React.useContext(repositoryContext);\n\n  const getShafromPath = React.useCallback((path: string) => {\n    if (allTrees.length === 0) {\n      return;\n    }\n    const result = allTrees.tree.find((t: any) => {\n      return t.path === path\n    });\n    if (result === undefined) {\n      return ''\n    }\n    return result.sha\n  }, [\n    allTrees\n  ])\n\n  return getShafromPath\n}\n\nexport default usePathToSha\n","import ListItem from '@mui/material/ListItem';\nimport { styled } from '@mui/material/styles';\n\nconst TreeBrowserListItem = styled(({className, ...rest}: any) => (\n  <ListItem className={className + \" tree-browser-list-item\"} {...rest} />\n))`\n& {\n  padding: 8px 4px;\n  color: #8b949e;\n  user-select: none;\n  margin: 1px;\n  background: #0d1117;\n  width: calc(100% - 2px);\n}\n& > .tree-browser-list-item-label {\n  margin-left: 4px;\n  color: #58a6ff;\n}\n&.active {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&.active > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n&:hover {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&:hover > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n`\n\nexport default TreeBrowserListItem\n","import React from 'react'\nimport { repositoryContext } from '../contexts/repository';\n\nconst useFilterTrees = (filteringText: string = '') => {\n  const {\n    allTrees,\n  } = React.useContext(repositoryContext)\n\n  return [\n    React.useMemo(() => {\n      if (allTrees.length === 0) {\n        return [];\n      }\n      return allTrees.tree\n      .filter((t: any) => t.type === 'blob')\n      .map((t: any) => t.path)\n      .filter((path: any) => {\n        return path.toUpperCase().includes(filteringText.toUpperCase())\n      })\n      .slice(0, 50)\n    }, [\n      filteringText,\n      allTrees\n    ])\n  ]\n}\n\nexport default useFilterTrees\n","import React from 'react'\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport GithubLink from '../../components/ui/GithubLink'\nimport InputBase from '@mui/material/InputBase';\nimport List from '@mui/material/List';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined';\nimport { useNavigate } from \"react-router-dom\";\nimport TreeBrowserListItem from '../../components/ui/TreeBrowserListItem';\nimport usePathToSha from '../../hooks/usePathToSha'\nimport useFilterTrees from '../../hooks/useFilterTrees'\n\nconst Find = () => {\n  const [ searchText, setSearchText ] = React.useState(\"\");\n  const [ acticveRow, setActiceRow ] = React.useState(0);\n  const [ filteredTrees ] = useFilterTrees(searchText);\n  const getShafromPath = usePathToSha();\n  const navigate = useNavigate();\n\n  const handleKeydown = ({ key }: any) => {\n    let n = acticveRow;\n    if (key === \"ArrowDown\") {\n      n += 1;\n    } else if (key === \"ArrowUp\") {\n      n -= 1;\n    } else if (key === \"Enter\") {\n      navigate('/blob/' + getShafromPath(filteredTrees[acticveRow]))\n    } else {}\n\n    n = n < 0 ? 0 : n;\n    n = n >= filteredTrees.length ? filteredTrees.length-1 : n;\n\n    setActiceRow(n);\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        mt={4}\n        sx={{\n          whiteSpace: 'pre',\n          fontSize: 16\n        }}\n      >\n        <GithubLink\n          href=\"#\"\n          className=\"active\"\n        >\n          {process.env.REACT_APP_REPOSITORY_NAME}\n        </GithubLink> / <InputBase\n          autoFocus\n          fullWidth\n          onKeyDown={handleKeydown}\n          onChange={({target: { value }}) => setSearchText(value)}\n        />\n      </Box>\n      <List\n        disablePadding\n        sx={{\n          background: '#30363d',\n        }}\n      >\n        {filteredTrees\n          .map((tree: any, index: number) => (\n          <TreeBrowserListItem\n            disablePadding\n            className={index === acticveRow ? 'active': ''}\n            onClick={() => navigate('/blob/' + getShafromPath(tree))}\n          >\n            <SvgIcon\n              component={ArrowForwardIosIcon}\n              sx={{\n                fontSize: 16,\n                marginX: 1,\n                visibility: index === acticveRow ? 'visible': 'hidden'\n              }}\n            />\n            <SvgIcon\n              component={InsertDriveFileOutlinedIcon}\n              sx={{ fontSize: 16 }}\n            />\n            <Typography\n              component=\"span\"\n              display=\"inline-block\"\n              className=\"tree-browser-list-item-label\"\n            >\n              {tree}\n            </Typography>\n          </TreeBrowserListItem>\n        ))}\n      </List>\n    </>\n  )\n}\n\nexport default Find;\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z\"\n}), 'ArrowForwardIos');\n\nexports.default = _default;"],"names":["repositoryContext","React","Provider","Consumer","initial","repository","branches","tags","commits","RepositoryProvider","children","state","dispatch","name","commit","sha","url","selectedBranch","changeBranch","allTrees","setAllTrees","getAllData","uri","p","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","tree_sha","value","path","result","tree","t","styled","className","rest","ListItem","filteringText","filter","type","map","toUpperCase","includes","slice","searchText","setSearchText","acticveRow","setActiceRow","useFilterTrees","filteredTrees","getShafromPath","usePathToSha","navigate","useNavigate","Box","display","alignItems","mt","sx","whiteSpace","fontSize","GithubLink","href","InputBase","autoFocus","fullWidth","onKeyDown","key","n","onChange","target","List","disablePadding","background","index","onClick","SvgIcon","component","ArrowForwardIosIcon","marginX","visibility","InsertDriveFileOutlinedIcon","Typography","Octokit","auth","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}