{"version":3,"file":"static/js/833.2a28a39b.chunk.js","mappings":"qYAYaA,EAAoBC,EAAAA,cAAyB,IAC3CC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAEnBC,EAAU,CACdC,WAAY,GACZC,SAAU,GACVC,KAAM,GACNC,QAAS,IAEJ,SAASC,EAAT,GAAgD,IAAlBC,EAAiB,EAAjBA,SACnC,EAA4BT,EAAAA,SAAoBG,GAAhD,eAAQO,EAAR,KAAeC,EAAf,KACA,EAAyCX,EAAAA,SAAoB,CAC3DY,KAAM,GACNC,OAAQ,CACNC,IAAK,GACLC,IAAK,MAJT,eAAQC,EAAR,KAAwBC,EAAxB,KAOA,EAAkCjB,EAAAA,SAAoB,IAAtD,eAAQkB,EAAR,KAAkBC,EAAlB,KAToD,SAWrCC,EAXqC,gFAWpD,WAA0BC,GAA1B,kFACMC,EAAI,EACJC,EAAW,GAFjB,uBAI2BC,EAAAA,EAAAA,QAAA,UAA2BH,EAA3B,oCAAkE,CACvFI,MAAOC,SACPC,KAAMD,eACNE,SAAU,IACVC,KAAMP,IARZ,mBAUwB,KANZQ,EAJZ,EAIYA,MAMCC,QAAsB,IAANT,EAV7B,qDAaMC,EAAMA,EAAIS,OAAOF,GACjBR,GAAK,EAdX,wDAiBSC,GAjBT,6CAXoD,sBA6GpD,OA9EAvB,EAAAA,WAAgB,WACdwB,EAAAA,EAAAA,QAAwB,4BAA6B,CACnDC,MAAOC,SACPC,KAAMD,iBAEPO,MAAK,SAAA7B,GACJ,IAAQ0B,EAAS1B,EAAT0B,KACRnB,GAAS,SAACuB,GACR,OAAO,kBACFA,GADL,IAEE9B,WAAY0B,YAIjB,IAEH9B,EAAAA,WAAgB,WACdoB,EAAW,sCACVa,MAAK,SAAC5B,GACLM,GAAS,SAACuB,GACR,OAAO,kBACFA,GADL,IAEE7B,SAAUA,YAIf,IACHL,EAAAA,WAAgB,WACdoB,EAAW,kCACVa,MAAK,SAAC3B,GACLK,GAAS,SAACuB,GACR,OAAO,kBACFA,GADL,IAEE5B,KAAMA,YAIX,IACHN,EAAAA,WAAgB,WACdoB,EAAW,qCACVa,MAAK,SAAC1B,GACLI,GAAS,SAACuB,GACR,OAAO,kBACFA,GADL,IAEE3B,QAASA,YAId,IACHP,EAAAA,WAAgB,gBAC0BmC,IAApCzB,EAAMN,WAAWgC,gBAGrBnB,EAAaP,EAAML,SAASgC,MAAK,SAACC,GAAD,OAAYA,EAAE1B,OAASF,EAAMN,WAAWgC,qBACxE,CACD1B,EAAMN,WACNM,EAAML,WAGRL,EAAAA,WAAgB,gBACSmC,IAAnBnB,GAG8B,KAA9BA,EAAeH,OAAOC,KAG1BU,EAAAA,EAAAA,QAAwB,6DAA8D,CACpFC,MAAOC,SACPC,KAAMD,eACNa,SAAUvB,EAAeH,OAAOC,MAEjCmB,MAAK,YAAe,IAAZH,EAAW,EAAXA,KACPX,EAAYW,QAEb,CACDd,KAIA,+BACE,SAACf,EAAD,CACEuC,MAAO,CACL9B,MAAAA,EACAC,SAAAA,EACAK,eAAAA,EACAC,aAAAA,EACAC,SAAAA,GANJ,SAQGT,MAQT,a,0DClJae,EAAkB,I,SAAIiB,GAAQ,CACzCC,MAAMhB","sources":["contexts/repository.tsx","plugins/Octokit.tsx"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from './../plugins/Octokit';\n\nexport interface RepositoryInterface {\n  branches: any,\n  tags: any,\n  commits: any,\n}\nexport interface RepositoryBranchInterface {\n  selectedBranch: string\n}\n\nexport const repositoryContext = React.createContext<any>({});\nexport const { Provider, Consumer } = repositoryContext;\n\nconst initial = {\n  repository: {},\n  branches: [],\n  tags: [],\n  commits: []\n}\nexport function RepositoryProvider({ children }: any) {\n  const [ state, dispatch ] = React.useState<any>(initial);\n  const [ selectedBranch, changeBranch ] = React.useState<any>({\n    name: '',\n    commit: {\n      sha: '',\n      url: ''\n    }\n  });\n  const [ allTrees, setAllTrees ] = React.useState<any>([]);\n\n  async function getAllData(uri: string) {\n    let p = 1\n    let arr: any = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data } = repository;\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n  }, [])\n\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/branches')\n    .then((branches: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/tags')\n    .then((tags: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData('GET /repos/{owner}/{repo}/commits')\n    .then((commits: any) => {\n      dispatch((prev: any) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find((b: any) => b.name === state.repository.default_branch))\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    if (selectedBranch === undefined) {\n      return;\n    }\n    if (selectedBranch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: selectedBranch.commit.sha\n    })\n    .then(({ data }) => {\n      setAllTrees(data)\n    })\n  }, [\n    selectedBranch\n  ])\n\n  return (\n    <>\n      <Provider\n        value={{\n          state,\n          dispatch,\n          selectedBranch,\n          changeBranch,\n          allTrees,\n        }}>\n        {children}\n      </Provider>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n"],"names":["repositoryContext","React","Provider","Consumer","initial","repository","branches","tags","commits","RepositoryProvider","children","state","dispatch","name","commit","sha","url","selectedBranch","changeBranch","allTrees","setAllTrees","getAllData","uri","p","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","tree_sha","value","Octokit","auth"],"sourceRoot":""}