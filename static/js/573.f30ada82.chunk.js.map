{"version":3,"file":"static/js/573.f30ada82.chunk.js","mappings":"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","sources":["components/Loading.tsx","contexts/repository.tsx","hooks/usePathToSha.tsx","components/ui/TreeBrowserListItem.tsx","hooks/useFilterTrees.tsx","pages/home/find.tsx","plugins/Octokit.tsx","../node_modules/@mui/icons-material/ArrowForwardIos.js"],"sourcesContent":["import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\n\ninterface LoadingProps {\n  loading: boolean\n}\nconst Loading: React.FC<LoadingProps> = (props) => {\n  const {\n    children,\n    loading\n  } = props;\n\n  if (loading) {\n    return <Grid\n      container\n      justifyContent=\"center\"\n      p={2}\n      flexDirection=\"column\"\n    >\n      <Grid item textAlign=\"center\">\n        <CircularProgress\n          data-testid=\"loading-circular-progress\"\n        />\n      </Grid>\n      <Grid item textAlign=\"center\">\n        Loading....\n      </Grid>\n    </Grid>\n  } else {\n    return <>{children}</>\n  }\n\n}\n\nexport default Loading;\n","import React from 'react';\nimport { Octokit } from '@octokit/rest'\nimport { GetResponseDataTypeFromEndpointMethod, } from \"@octokit/types\";\nimport { OctokitInstance } from './../plugins/Octokit';\nimport Loading from '../components/Loading'\n\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\nconst octokit = new Octokit();\nexport type GithubGetRepositoryResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.get\n>\nexport type GithubGetBranchResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getBranch\n>\nexport type GithubListRepositoryTagsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listTags\n  >\n>\nexport type GithubListCommitsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listCommits\n  >\n>\nexport type GithubGetTreeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.git.getTree\n>\nexport type GithubGetRepositoryReadmeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getReadme\n>\nexport interface RepositoryData {\n  repository: GithubGetRepositoryResponseType | null,\n  branches: Array<GithubGetBranchResponseType>,\n  tags: Array<GithubListRepositoryTagsResponseType>,\n  commits: Array<GithubListCommitsResponseType>,\n}\nexport interface RepositoryContext {\n  state: RepositoryData,\n  dispatch: React.Dispatch<RepositoryData>,\n  selectedBranch: GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null,\n  changeBranch: React.Dispatch<React.SetStateAction<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>>,\n  allTrees: GithubGetTreeResponseType | null,\n  loading: boolean\n}\n\nconst initialState = {\n  repository: null,\n  branches: [],\n  tags: [],\n  commits: []\n}\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  selectedBranch: null,\n  changeBranch: () => {},\n  allTrees: null,\n  loading: true\n}\nexport const repositoryContext = React.createContext<RepositoryContext>(initialContext);\nexport const { Provider, Consumer } = repositoryContext;\nexport const RepositoryProvider: React.FC = function ({ children }) {\n  const [ state, dispatch ] = React.useState<RepositoryData>(initialState);\n  const [ selectedBranch, changeBranch ] = React.useState<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>(null);\n  const [ allTrees, setAllTrees ] = React.useState<GithubGetTreeResponseType | null>(null);\n  const [ loadingForRepo, setLoadingForRepo ] = React.useState<boolean>(true);\n  const [ loadingForBranch, setLoadingForBranch ] = React.useState<boolean>(true);\n  const [ loadingForTag, setLoadingForTag ] = React.useState<boolean>(true);\n  const [ loadingForCommit, setLoadingForCommit ] = React.useState<boolean>(true);\n  const [ loadingForTree, setLoadingForTree ] = React.useState<boolean>(true);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  async function getAllData<T>(uri: string): Promise<Array<T>> {\n    let p = 1\n    let arr: Array<T> = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data }: { data: GithubGetRepositoryResponseType } = repository;\n      dispatch((prev) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n    .then(() => setLoadingForRepo(false));\n  }, [])\n\n  React.useEffect(() => {\n    getAllData<GithubGetBranchResponseType>('GET /repos/{owner}/{repo}/branches')\n    .then(branches => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n    .then(() => setLoadingForBranch(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListRepositoryTagsResponseType>('GET /repos/{owner}/{repo}/tags')\n    .then((tags) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n    .then(() => setLoadingForTag(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListCommitsResponseType>('GET /repos/{owner}/{repo}/commits')\n    .then((commits) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n    .then(() => setLoadingForCommit(false));\n  }, [])\n  React.useEffect(() => {\n    if (state.repository === null) {\n      return;\n    }\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find(b => b.name === state.repository?.default_branch) as GithubGetBranchResponseType)\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    setLoadingForTree(true);\n    const branch = selectedBranch as GithubGetBranchResponseType | null;\n    if (branch === null || branch === undefined) {\n      return;\n    }\n    if (branch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: branch.commit.sha\n    })\n    .then(({ data }: {data: GithubGetTreeResponseType}) => {\n      setAllTrees(data)\n    })\n    .then(() => setLoadingForTree(false));\n  }, [\n    selectedBranch\n  ])\n\n  React.useEffect(() => {\n    if ([\n      loadingForTag,\n      loadingForTree,\n      loadingForRepo,\n      loadingForBranch,\n      loadingForCommit\n    ].some(Boolean) === true) {\n      if (!loading) {\n        setLoading(true);\n      }\n      return;\n    }\n    setLoading(false);\n  }, [\n    loadingForTag,\n    loadingForTree,\n    loadingForRepo,\n    loadingForBranch,\n    loadingForCommit,\n    loading\n  ])\n\n  return (\n    <>\n      <Loading loading={loading}>\n        <Provider\n          value={{\n            state,\n            dispatch,\n            selectedBranch,\n            changeBranch,\n            allTrees,\n            loading\n          }}\n        >\n          {children}\n        </Provider>\n      </Loading>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import React from 'react';\nimport { repositoryContext } from '../contexts/repository';\n\ntype usePathToShaType = string | undefined;\nconst usePathToSha: () => (path: string) => usePathToShaType = () => {\n  const {\n    allTrees\n  } = React.useContext(repositoryContext);\n\n  const getShaFromPath = React.useCallback((path: string) => {\n    if (allTrees === null) {\n      return;\n    }\n    if (allTrees.tree.length === 0) {\n      return;\n    }\n    const result = allTrees.tree.find(t => {\n      return t.path === path\n    });\n    if (result === undefined) {\n      return ''\n    }\n    return result.sha\n  }, [\n    allTrees\n  ])\n\n  return getShaFromPath\n}\n\nexport default usePathToSha\n","import React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport { ListItemProps } from '@mui/material/ListItem';\nimport { styled } from '@mui/material/styles';\n\ninterface TreeBrowserListItemUIProps {}\nconst TreeBrowserListItem = styled(React.forwardRef<HTMLLIElement, ListItemProps<'li', TreeBrowserListItemUIProps>>(({className, ...rest}, ref) => (\n  <ListItem\n    className={className + \" tree-browser-list-item\"}\n    ref={ref}\n    data-testid=\"tree-browser-list-item\"\n    {...rest}\n  />\n)))`\n& {\n  padding: 8px 4px;\n  color: #8b949e;\n  user-select: none;\n  background: transparent;\n  border-bottom: 1px solid #30363d;\n}\n& > .tree-browser-list-item-label {\n  margin-left: 4px;\n  color: #58a6ff;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n&.active {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&.active > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n&:hover {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&:hover > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n`\n\nexport default TreeBrowserListItem\n","import React from 'react'\nimport { repositoryContext } from '../contexts/repository';\n\ntype useFilterTreesType = [\n  Array<string>\n]\nconst useFilterTrees: (filteringText: string) => useFilterTreesType = (filteringText: string = '') => {\n  const {\n    allTrees,\n  } = React.useContext(repositoryContext)\n\n  return [\n    React.useMemo(() => {\n      if (allTrees === null) {\n        return [];\n      }\n      if (allTrees.tree.length === 0) {\n        return [];\n      }\n      return allTrees.tree\n      .filter(t => t.type === 'blob')\n      .filter(t => t.path !== undefined)\n      .map(t => t.path as string)\n      .filter(path => {\n        return path.toUpperCase().includes(filteringText.toUpperCase())\n      })\n      .slice(0, 50)\n    }, [\n      filteringText,\n      allTrees\n    ])\n  ]\n}\n\nexport default useFilterTrees\n","import React from 'react'\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport GithubLink from '../../components/ui/GithubLink'\nimport InputBase from '@mui/material/InputBase';\nimport List from '@mui/material/List';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined';\nimport { useNavigate } from \"react-router-dom\";\nimport TreeBrowserListItem from '../../components/ui/TreeBrowserListItem';\nimport usePathToSha from '../../hooks/usePathToSha'\nimport useFilterTrees from '../../hooks/useFilterTrees'\n\nconst Find = () => {\n  const [ searchText, setSearchText ] = React.useState<string>(\"\");\n  const [ activeRow, setActiveRow ] = React.useState<number>(0);\n  const [ filteredTrees ] = useFilterTrees(searchText);\n  const getShaFromPath = usePathToSha();\n  const navigate = useNavigate();\n\n  const handleKeydown = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n    let n = activeRow;\n    if (key === \"ArrowDown\") {\n      n += 1;\n    } else if (key === \"ArrowUp\") {\n      n -= 1;\n    } else if (key === \"Enter\") {\n      navigate('/blob/' + getShaFromPath(filteredTrees[activeRow]))\n    } else {}\n\n    n = n < 0 ? filteredTrees.length-1 : n;\n    n = n >= filteredTrees.length ? 0 : n;\n\n    setActiveRow(n);\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        mt={4}\n        mb={1}\n        sx={{\n          whiteSpace: 'pre',\n          fontSize: 16\n        }}\n        data-testid=\"page-find\"\n      >\n        <GithubLink\n          href=\"#\"\n          className=\"active\"\n          sx={{\n            fontSize: '16px !important'\n          }}\n        >\n          {process.env.REACT_APP_REPOSITORY_NAME}\n        </GithubLink> / <InputBase\n          autoFocus\n          fullWidth\n          onKeyDown={handleKeydown}\n          onChange={({target: { value }}) => setSearchText(value)}\n          sx={{\n            '& .MuiInputBase-input': {\n              'outline': 'none',\n              'boxShadow': 'none'\n            },\n            '& .MuiInputBase-input:focus': {\n              'border': 'solid 1px #58a6ff',\n              'padding': '5px 12px',\n              'borderRadius': '6px'\n            }\n          }}\n        />\n      </Box>\n      <List\n        disablePadding\n        sx={{\n          border: '1px solid #30363d',\n          borderBottom: '0',\n        }}\n      >\n        {filteredTrees\n          .map((tree, index) => (\n          <TreeBrowserListItem\n            disablePadding\n            className={index === activeRow ? 'active': ''}\n            onClick={() => navigate('/blob/' + getShaFromPath(tree))}\n            key={index}\n          >\n            <SvgIcon\n              component={ArrowForwardIosIcon}\n              sx={{\n                fontSize: 16,\n                marginX: 1,\n                visibility: index === activeRow ? 'visible': 'hidden'\n              }}\n            />\n            <SvgIcon\n              component={InsertDriveFileOutlinedIcon}\n              sx={{ fontSize: 16 }}\n            />\n            <Typography\n              component=\"span\"\n              display=\"inline-block\"\n              className=\"tree-browser-list-item-label\"\n            >\n              {tree}\n            </Typography>\n          </TreeBrowserListItem>\n        ))}\n      </List>\n    </>\n  )\n}\n\nexport default Find;\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z\"\n}), 'ArrowForwardIos');\nexports.default = _default;"],"names":["props","children","loading","container","justifyContent","p","flexDirection","item","textAlign","initialState","Octokit","repository","branches","tags","commits","initialContext","state","dispatch","selectedBranch","changeBranch","allTrees","repositoryContext","React","Provider","Consumer","RepositoryProvider","setAllTrees","loadingForRepo","setLoadingForRepo","loadingForBranch","setLoadingForBranch","loadingForTag","setLoadingForTag","loadingForCommit","setLoadingForCommit","loadingForTree","setLoadingForTree","setLoading","getAllData","uri","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","name","branch","commit","sha","tree_sha","some","Boolean","value","path","tree","result","t","styled","ref","className","rest","ListItem","filteringText","filter","type","map","toUpperCase","includes","slice","searchText","setSearchText","activeRow","setActiveRow","useFilterTrees","filteredTrees","getShaFromPath","usePathToSha","navigate","useNavigate","Box","display","alignItems","mt","mb","sx","whiteSpace","fontSize","GithubLink","href","InputBase","autoFocus","fullWidth","onKeyDown","key","n","onChange","target","List","disablePadding","border","borderBottom","index","onClick","SvgIcon","component","ArrowForwardIosIcon","marginX","visibility","InsertDriveFileOutlinedIcon","Typography","auth","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}