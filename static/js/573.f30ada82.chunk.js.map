{"version":3,"file":"static/js/573.f30ada82.chunk.js","mappings":"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","sources":["components/Loading.tsx","contexts/repository.tsx","hooks/usePathToSha.tsx","components/ui/TreeBrowserListItem.tsx","hooks/useFilterTrees.tsx","pages/home/find.tsx","plugins/Octokit.tsx","../node_modules/@mui/icons-material/ArrowForwardIos.js"],"sourcesContent":["import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport CircularProgress from '@mui/material/CircularProgress';\n\ninterface LoadingProps {\n  loading: boolean\n}\nconst Loading: React.FC<LoadingProps> = (props) => {\n  const {\n    children,\n    loading\n  } = props;\n\n  if (loading) {\n    return <Grid\n      container\n      justifyContent=\"center\"\n      p={2}\n      flexDirection=\"column\"\n    >\n      <Grid item textAlign=\"center\">\n        <CircularProgress\n          data-testid=\"loading-circular-progress\"\n        />\n      </Grid>\n      <Grid item textAlign=\"center\">\n        Loading....\n      </Grid>\n    </Grid>\n  } else {\n    return <>{children}</>\n  }\n\n}\n\nexport default Loading;\n","import React from 'react';\nimport { Octokit } from '@octokit/rest'\nimport { GetResponseDataTypeFromEndpointMethod, } from \"@octokit/types\";\nimport { OctokitInstance } from './../plugins/Octokit';\nimport Loading from '../components/Loading'\n\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\nconst octokit = new Octokit();\nexport type GithubGetRepositoryResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.get\n>\nexport type GithubGetBranchResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getBranch\n>\nexport type GithubListRepositoryTagsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listTags\n  >\n>\nexport type GithubListCommitsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listCommits\n  >\n>\nexport type GithubGetTreeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.git.getTree\n>\nexport type GithubGetRepositoryReadmeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getReadme\n>\nexport interface RepositoryData {\n  repository: GithubGetRepositoryResponseType | null,\n  branches: Array<GithubGetBranchResponseType>,\n  tags: Array<GithubListRepositoryTagsResponseType>,\n  commits: Array<GithubListCommitsResponseType>,\n}\nexport interface RepositoryContext {\n  state: RepositoryData,\n  dispatch: React.Dispatch<RepositoryData>,\n  selectedBranch: GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null,\n  changeBranch: React.Dispatch<React.SetStateAction<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>>,\n  allTrees: GithubGetTreeResponseType | null,\n  loading: boolean\n}\n\nconst initialState = {\n  repository: null,\n  branches: [],\n  tags: [],\n  commits: []\n}\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  selectedBranch: null,\n  changeBranch: () => {},\n  allTrees: null,\n  loading: true\n}\nexport const repositoryContext = React.createContext<RepositoryContext>(initialContext);\nexport const { Provider, Consumer } = repositoryContext;\nexport const RepositoryProvider: React.FC = function ({ children }) {\n  const [ state, dispatch ] = React.useState<RepositoryData>(initialState);\n  const [ selectedBranch, changeBranch ] = React.useState<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>(null);\n  const [ allTrees, setAllTrees ] = React.useState<GithubGetTreeResponseType | null>(null);\n  const [ loadingForRepo, setLoadingForRepo ] = React.useState<boolean>(true);\n  const [ loadingForBranch, setLoadingForBranch ] = React.useState<boolean>(true);\n  const [ loadingForTag, setLoadingForTag ] = React.useState<boolean>(true);\n  const [ loadingForCommit, setLoadingForCommit ] = React.useState<boolean>(true);\n  const [ loadingForTree, setLoadingForTree ] = React.useState<boolean>(true);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  async function getAllData<T>(uri: string): Promise<Array<T>> {\n    let p = 1\n    let arr: Array<T> = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data }: { data: GithubGetRepositoryResponseType } = repository;\n      dispatch((prev) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n    .then(() => setLoadingForRepo(false));\n  }, [])\n\n  React.useEffect(() => {\n    getAllData<GithubGetBranchResponseType>('GET /repos/{owner}/{repo}/branches')\n    .then(branches => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n    .then(() => setLoadingForBranch(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListRepositoryTagsResponseType>('GET /repos/{owner}/{repo}/tags')\n    .then((tags) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n    .then(() => setLoadingForTag(false));\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListCommitsResponseType>('GET /repos/{owner}/{repo}/commits')\n    .then((commits) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n    .then(() => setLoadingForCommit(false));\n  }, [])\n  React.useEffect(() => {\n    if (state.repository === null) {\n      return;\n    }\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find(b => b.name === state.repository?.default_branch) as GithubGetBranchResponseType)\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    setLoadingForTree(true);\n    const branch = selectedBranch as GithubGetBranchResponseType | null;\n    if (branch === null || branch === undefined) {\n      return;\n    }\n    if (branch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: branch.commit.sha\n    })\n    .then(({ data }: {data: GithubGetTreeResponseType}) => {\n      setAllTrees(data)\n    })\n    .then(() => setLoadingForTree(false));\n  }, [\n    selectedBranch\n  ])\n\n  React.useEffect(() => {\n    if ([\n      loadingForTag,\n      loadingForTree,\n      loadingForRepo,\n      loadingForBranch,\n      loadingForCommit\n    ].some(Boolean) === true) {\n      if (!loading) {\n        setLoading(true);\n      }\n      return;\n    }\n    setLoading(false);\n  }, [\n    loadingForTag,\n    loadingForTree,\n    loadingForRepo,\n    loadingForBranch,\n    loadingForCommit,\n    loading\n  ])\n\n  return (\n    <>\n      <Loading loading={loading}>\n        <Provider\n          value={{\n            state,\n            dispatch,\n            selectedBranch,\n            changeBranch,\n            allTrees,\n            loading\n          }}\n        >\n          {children}\n        </Provider>\n      </Loading>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import React from 'react';\nimport { repositoryContext } from '../contexts/repository';\n\ntype usePathToShaType = string | undefined;\nconst usePathToSha: () => (path: string) => usePathToShaType = () => {\n  const {\n    allTrees\n  } = React.useContext(repositoryContext);\n\n  const getShaFromPath = React.useCallback((path: string) => {\n    if (allTrees === null) {\n      return;\n    }\n    if (allTrees.tree.length === 0) {\n      return;\n    }\n    const result = allTrees.tree.find(t => {\n      return t.path === path\n    });\n    if (result === undefined) {\n      return ''\n    }\n    return result.sha\n  }, [\n    allTrees\n  ])\n\n  return getShaFromPath\n}\n\nexport default usePathToSha\n","import React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport { ListItemProps } from '@mui/material/ListItem';\nimport { styled } from '@mui/material/styles';\n\ninterface TreeBrowserListItemUIProps {}\nconst TreeBrowserListItem = styled(React.forwardRef<HTMLLIElement, ListItemProps<'li', TreeBrowserListItemUIProps>>(({className, ...rest}, ref) => (\n  <ListItem\n    className={className + \" tree-browser-list-item\"}\n    ref={ref}\n    data-testid=\"tree-browser-list-item\"\n    {...rest}\n  />\n)))`\n& {\n  padding: 8px 4px;\n  color: #8b949e;\n  user-select: none;\n  background: transparent;\n  border-bottom: 1px solid #30363d;\n}\n& > .tree-browser-list-item-label {\n  margin-left: 4px;\n  color: #58a6ff;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n&.active {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&.active > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n&:hover {\n  background: #1f6feb;\n  color: #f0f6fc;\n  cursor: pointer;\n}\n&:hover > .tree-browser-list-item-label {\n  color: #f0f6fc;\n}\n`\n\nexport default TreeBrowserListItem\n","import React from 'react'\nimport { repositoryContext } from '../contexts/repository';\n\ntype useFilterTreesType = [\n  Array<string>\n]\nconst useFilterTrees: (filteringText: string) => useFilterTreesType = (filteringText: string = '') => {\n  const {\n    allTrees,\n  } = React.useContext(repositoryContext)\n\n  return [\n    React.useMemo(() => {\n      if (allTrees === null) {\n        return [];\n      }\n      if (allTrees.tree.length === 0) {\n        return [];\n      }\n      return allTrees.tree\n      .filter(t => t.type === 'blob')\n      .filter(t => t.path !== undefined)\n      .map(t => t.path as string)\n      .filter(path => {\n        return path.toUpperCase().includes(filteringText.toUpperCase())\n      })\n      .slice(0, 50)\n    }, [\n      filteringText,\n      allTrees\n    ])\n  ]\n}\n\nexport default useFilterTrees\n","import React from 'react'\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport GithubLink from '../../components/ui/GithubLink'\nimport InputBase from '@mui/material/InputBase';\nimport List from '@mui/material/List';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined';\nimport { useNavigate } from \"react-router-dom\";\nimport TreeBrowserListItem from '../../components/ui/TreeBrowserListItem';\nimport usePathToSha from '../../hooks/usePathToSha'\nimport useFilterTrees from '../../hooks/useFilterTrees'\n\nconst Find = () => {\n  const [ searchText, setSearchText ] = React.useState<string>(\"\");\n  const [ activeRow, setActiveRow ] = React.useState<number>(0);\n  const [ filteredTrees ] = useFilterTrees(searchText);\n  const getShaFromPath = usePathToSha();\n  const navigate = useNavigate();\n\n  const handleKeydown = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n    let n = activeRow;\n    if (key === \"ArrowDown\") {\n      n += 1;\n    } else if (key === \"ArrowUp\") {\n      n -= 1;\n    } else if (key === \"Enter\") {\n      navigate('/blob/' + getShaFromPath(filteredTrees[activeRow]))\n    } else {}\n\n    n = n < 0 ? filteredTrees.length-1 : n;\n    n = n >= filteredTrees.length ? 0 : n;\n\n    setActiveRow(n);\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        mt={4}\n        mb={1}\n        sx={{\n          whiteSpace: 'pre',\n          fontSize: 16\n        }}\n        data-testid=\"page-find\"\n      >\n        <GithubLink\n          href=\"#\"\n          className=\"active\"\n          sx={{\n            fontSize: '16px !important'\n          }}\n        >\n          {process.env.REACT_APP_REPOSITORY_NAME}\n        </GithubLink> / <InputBase\n          autoFocus\n          fullWidth\n          onKeyDown={handleKeydown}\n          onChange={({target: { value }}) => setSearchText(value)}\n          sx={{\n            '& .MuiInputBase-input': {\n              'outline': 'none',\n              'boxShadow': 'none'\n            },\n            '& .MuiInputBase-input:focus': {\n              'border': 'solid 1px #58a6ff',\n              'padding': '5px 12px',\n              'borderRadius': '6px'\n            }\n          }}\n        />\n      </Box>\n      <List\n        disablePadding\n        sx={{\n          border: '1px solid #30363d',\n          borderBottom: '0',\n        }}\n      >\n        {filteredTrees\n          .map((tree, index) => (\n          <TreeBrowserListItem\n            disablePadding\n            className={index === activeRow ? 'active': ''}\n            onClick={() => navigate('/blob/' + getShaFromPath(tree))}\n            key={index}\n          >\n            <SvgIcon\n              component={ArrowForwardIosIcon}\n              sx={{\n                fontSize: 16,\n                marginX: 1,\n                visibility: index === activeRow ? 'visible': 'hidden'\n              }}\n            />\n            <SvgIcon\n              component={InsertDriveFileOutlinedIcon}\n              sx={{ fontSize: 16 }}\n            />\n            <Typography\n              component=\"span\"\n              display=\"inline-block\"\n              className=\"tree-browser-list-item-label\"\n            >\n              {tree}\n            </Typography>\n          </TreeBrowserListItem>\n        ))}\n      </List>\n    </>\n  )\n}\n\nexport default Find;\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z\"\n}), 'ArrowForwardIos');\nexports.default = _default;"],"names":["props","children","loading","_jsxs","Grid","container","justifyContent","p","flexDirection","_jsx","item","textAlign","CircularProgress","_Fragment","initialState","Octokit","repository","branches","tags","commits","initialContext","state","dispatch","selectedBranch","changeBranch","allTrees","repositoryContext","React","Provider","Consumer","RepositoryProvider","_ref","_React$useState","_React$useState2","_slicedToArray","_React$useState3","_React$useState4","_React$useState5","_React$useState6","setAllTrees","_React$useState7","_React$useState8","loadingForRepo","setLoadingForRepo","_React$useState9","_React$useState10","loadingForBranch","setLoadingForBranch","_React$useState11","_React$useState12","loadingForTag","setLoadingForTag","_React$useState13","_React$useState14","loadingForCommit","setLoadingForCommit","_React$useState15","_React$useState16","loadingForTree","setLoadingForTree","_React$useState17","_React$useState18","setLoading","getAllData","_x","_getAllData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uri","arr","_yield$OctokitInstanc","data","wrap","_context","prev","next","OctokitInstance","concat","owner","process","repo","per_page","page","sent","length","abrupt","stop","then","_objectSpread","undefined","default_branch","find","b","_state$repository","name","branch","commit","sha","tree_sha","_ref2","some","Boolean","Loading","value","path","tree","result","t","styled","ref","className","rest","_objectWithoutProperties","_excluded","ListItem","_templateObject","_taggedTemplateLiteral","filteringText","filter","type","map","toUpperCase","includes","slice","searchText","setSearchText","activeRow","setActiveRow","_useFilterTrees","useFilterTrees","filteredTrees","getShaFromPath","usePathToSha","navigate","useNavigate","Box","display","alignItems","mt","mb","sx","whiteSpace","fontSize","GithubLink","href","InputBase","autoFocus","fullWidth","onKeyDown","key","n","onChange","target","List","disablePadding","border","borderBottom","index","TreeBrowserListItem","onClick","SvgIcon","component","ArrowForwardIosIcon","marginX","visibility","InsertDriveFileOutlinedIcon","Typography","auth","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}