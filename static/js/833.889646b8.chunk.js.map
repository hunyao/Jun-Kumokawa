{"version":3,"file":"static/js/833.889646b8.chunk.js","mappings":"gZA2CMA,GArCU,IAAIC,EAAAA,EAqCC,CACnBC,WAAY,KACZC,SAAU,GACVC,KAAM,GACNC,QAAS,KAELC,EAAiB,CACrBC,MAAOP,EACPQ,SAAU,WAAO,EACjBC,eAAgB,KAChBC,aAAc,WAAO,EACrBC,SAAU,MAECC,EAAoBC,EAAAA,cAAuCP,GACzDQ,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACZC,EAA+B,SAAH,GAA4B,IAAbC,EAAQ,EAARA,SACtD,EAA4BJ,EAAAA,SAA+Bb,GAAa,eAAhEO,EAAK,KAAEC,EAAQ,KACvB,EAAyCK,EAAAA,SAA0F,MAAK,eAAhIJ,EAAc,KAAEC,EAAY,KACpC,EAAkCG,EAAAA,SAAiD,MAAK,eAAhFF,EAAQ,KAAEO,EAAW,KAA4D,SAE1EC,EAAU,+CAkBxB,OAlBwB,0BAAzB,WAA6BC,GAAW,kFAClCC,EAAI,EACJC,EAAgB,GAAG,KAAD,EACV,gBACaC,EAAAA,EAAAA,QAAwB,GAAD,OAAIH,EAAG,oCAAoC,CACvFI,MAAOC,SACPC,KAAMD,eACNE,SAAU,IACVC,KAAMP,IACN,OALU,GAKV,SACkB,KANZQ,EAAI,EAAJA,MAMCC,QAAsB,IAANT,EAAO,qDAG9BC,EAAMA,EAAIS,OAAOF,GACjBR,GAAK,EAAC,wDAGHC,GAAG,6CACX,sBAoFD,OAlFAT,EAAAA,WAAgB,WACdU,EAAAA,EAAAA,QAAwB,4BAA6B,CACnDC,MAAOC,SACPC,KAAMD,iBAEPO,MAAK,SAAA9B,GACJ,IAAQ2B,EAAoD3B,EAApD2B,KACRrB,GAAS,SAACyB,GACR,OAAO,kBACFA,GAAI,IACP/B,WAAY2B,GAEhB,GACF,GACF,GAAG,IAEHhB,EAAAA,WAAgB,WACdM,EAAwC,sCACvCa,MAAK,SAAA7B,GACJK,GAAS,SAACyB,GACR,OAAO,kBACFA,GAAI,IACP9B,SAAUA,GAEd,GACF,GACF,GAAG,IACHU,EAAAA,WAAgB,WACdM,EAAiD,kCAChDa,MAAK,SAAC5B,GACLI,GAAS,SAACyB,GACR,OAAO,kBACFA,GAAI,IACP7B,KAAMA,GAEV,GACF,GACF,GAAG,IACHS,EAAAA,WAAgB,WACdM,EAA0C,qCACzCa,MAAK,SAAC3B,GACLG,GAAS,SAACyB,GACR,OAAO,kBACFA,GAAI,IACP5B,QAASA,GAEb,GACF,GACF,GAAG,IACHQ,EAAAA,WAAgB,WACW,OAArBN,EAAML,iBAG8BgC,IAApC3B,EAAML,WAAWiC,gBAGrBzB,EAAaH,EAAMJ,SAASiC,MAAK,SAAAC,GAAC,aAAIA,EAAEC,QAAyB,QAArB,EAAK/B,EAAML,kBAAU,aAAhB,EAAkBiC,eAAc,IACnF,GAAG,CACD5B,EAAML,WACNK,EAAMJ,WAGRU,EAAAA,WAAgB,WACd,IAAM0B,EAAS9B,EACA,OAAX8B,QAA8BL,IAAXK,GAGG,KAAtBA,EAAOC,OAAOC,KAGlBlB,EAAAA,EAAAA,QAAwB,6DAA8D,CACpFC,MAAOC,SACPC,KAAMD,eACNiB,SAAUH,EAAOC,OAAOC,MAEzBT,MAAK,YAAkD,IAA/CH,EAAI,EAAJA,KACPX,EAAYW,EACd,GACF,GAAG,CACDpB,KAIA,+BACE,SAACK,EAAQ,CACP6B,MAAO,CACLpC,MAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAC,SAAAA,GACA,SACDM,KAIT,EAIA,W,4DCrLaM,EAAkB,I,SAAItB,GAAQ,CACzC2C,MAAMnB,G","sources":["contexts/repository.tsx","plugins/Octokit.tsx"],"sourcesContent":["import React from 'react';\nimport { Octokit } from '@octokit/rest'\nimport { GetResponseDataTypeFromEndpointMethod, } from \"@octokit/types\";\nimport { OctokitInstance } from './../plugins/Octokit';\n\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\nconst octokit = new Octokit();\nexport type GithubGetRepositoryResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.get\n>\nexport type GithubGetBranchResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getBranch\n>\nexport type GithubListRepositoryTagsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listTags\n  >\n>\nexport type GithubListCommitsResponseType = Unpacked<\n  GetResponseDataTypeFromEndpointMethod<\n    typeof octokit.rest.repos.listCommits\n  >\n>\nexport type GithubGetTreeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.git.getTree\n>\nexport type GithubGetRepositoryReadmeResponseType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.repos.getReadme\n>\nexport interface RepositoryData {\n  repository: GithubGetRepositoryResponseType | null,\n  branches: Array<GithubGetBranchResponseType>,\n  tags: Array<GithubListRepositoryTagsResponseType>,\n  commits: Array<GithubListCommitsResponseType>,\n}\nexport interface RepositoryContext {\n  state: RepositoryData,\n  dispatch: React.Dispatch<RepositoryData>,\n  selectedBranch: GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null,\n  changeBranch: React.Dispatch<React.SetStateAction<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>>,\n  allTrees: GithubGetTreeResponseType | null\n}\n\nconst initialState = {\n  repository: null,\n  branches: [],\n  tags: [],\n  commits: []\n}\nconst initialContext = {\n  state: initialState,\n  dispatch: () => {},\n  selectedBranch: null,\n  changeBranch: () => {},\n  allTrees: null\n}\nexport const repositoryContext = React.createContext<RepositoryContext>(initialContext);\nexport const { Provider, Consumer } = repositoryContext;\nexport const RepositoryProvider: React.FC = function ({ children }) {\n  const [ state, dispatch ] = React.useState<RepositoryData>(initialState);\n  const [ selectedBranch, changeBranch ] = React.useState<GithubGetBranchResponseType | GithubListRepositoryTagsResponseType | null>(null);\n  const [ allTrees, setAllTrees ] = React.useState<GithubGetTreeResponseType | null>(null);\n\n  async function getAllData<T>(uri: string): Promise<Array<T>> {\n    let p = 1\n    let arr: Array<T> = [];\n    while (true) {\n      const { data } = await OctokitInstance.request(`${uri}?per_page={per_page}&page={page}`, {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        per_page: 100,\n        page: p\n      })\n      if (data.length === 0 || p === 5) {\n        break;\n      } else {\n        arr = arr.concat(data);\n        p += 1\n      }\n    }\n    return arr;\n  }\n\n  React.useEffect(() => {\n    OctokitInstance.request('GET /repos/{owner}/{repo}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string\n    })\n    .then(repository => {\n      const { data }: { data: GithubGetRepositoryResponseType } = repository;\n      dispatch((prev) => {\n        return {\n          ...prev,\n          repository: data\n        }\n      })\n    })\n  }, [])\n\n  React.useEffect(() => {\n    getAllData<GithubGetBranchResponseType>('GET /repos/{owner}/{repo}/branches')\n    .then(branches => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          branches: branches\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListRepositoryTagsResponseType>('GET /repos/{owner}/{repo}/tags')\n    .then((tags) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          tags: tags\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    getAllData<GithubListCommitsResponseType>('GET /repos/{owner}/{repo}/commits')\n    .then((commits) => {\n      dispatch((prev) => {\n        return {\n          ...prev,\n          commits: commits\n        }\n      })\n    })\n  }, [])\n  React.useEffect(() => {\n    if (state.repository === null) {\n      return;\n    }\n    if (state.repository.default_branch === undefined) {\n      return;\n    }\n    changeBranch(state.branches.find(b => b.name === state.repository?.default_branch) as GithubGetBranchResponseType)\n  }, [\n    state.repository,\n    state.branches\n  ])\n\n  React.useEffect(() => {\n    const branch = selectedBranch as GithubGetBranchResponseType | null;\n    if (branch === null || branch === undefined) {\n      return;\n    }\n    if (branch.commit.sha === '') {\n      return;\n    }\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      tree_sha: branch.commit.sha\n    })\n    .then(({ data }: {data: GithubGetTreeResponseType}) => {\n      setAllTrees(data)\n    })\n  }, [\n    selectedBranch\n  ])\n\n  return (\n    <>\n      <Provider\n        value={{\n          state,\n          dispatch,\n          selectedBranch,\n          changeBranch,\n          allTrees,\n        }}>\n        {children}\n      </Provider>\n    </>\n  )\n}\nexport {\n  Consumer as RepositoryConsumer\n}\nexport default RepositoryProvider;\n\n// vim: sw=2:ai\n","import { Octokit } from '@octokit/core'\n\nexport const OctokitInstance = new Octokit({\n  auth: process.env.NODE_ENV !== 'production' && process.env.REACT_APP_GITHUB_APIKEY\n});\n"],"names":["initialState","Octokit","repository","branches","tags","commits","initialContext","state","dispatch","selectedBranch","changeBranch","allTrees","repositoryContext","React","Provider","Consumer","RepositoryProvider","children","setAllTrees","getAllData","uri","p","arr","OctokitInstance","owner","process","repo","per_page","page","data","length","concat","then","prev","undefined","default_branch","find","b","name","branch","commit","sha","tree_sha","value","auth"],"sourceRoot":""}