{"version":3,"file":"static/js/561.3a74b657.chunk.js","mappings":"gQAoHA,UAzGiB,WACf,IAAAA,EAAgCC,EAAAA,SAAuB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC3BI,EAAkCL,EAAAA,UAAwB,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAxDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC7BG,EAAgCT,EAAAA,UAAwB,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC3BG,EAAkCb,EAAAA,SAAuB,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAApDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC7BG,EAA0BjB,EAAAA,SAAuB,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAA5CE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACrBG,EAAgCrB,EAAAA,UAAwB,GAAKsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAArDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC3BG,EAA4BzB,EAAAA,UAAwB,GAAM0B,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAAlDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACSG,GAAXC,EAAAA,EAAAA,MAAbC,IAAAA,OAAG,IAAAF,EAAG,GAAEA,EACVG,GAAiBC,EAAAA,EAAAA,KAkEvB,OAhEAjC,EAAAA,WAAgB,WACd,IAAAkC,EAAsBF,EAAeD,GAAII,GAAAjC,EAAAA,EAAAA,GAAAgC,EAAA,GAAjCE,EAAID,EAAA,GAAKA,EAAA,GAEfP,GAAS,GAETZ,EAAYoB,EAEhB,GAAG,CACDJ,EACAD,IAGF/B,EAAAA,WAAgB,WACd,IAAIqC,GAAU,EACd,IAAIV,EA0CJ,OAvCAW,EAAAA,EAAAA,QACW,iDAAkD,CACzDC,MAAOC,SACPC,KAAMD,eACNE,SAAUX,IAEXY,MAAK,SAAAC,GAAe,IAAZC,EAAID,EAAJC,KACP,GAAIR,EAEF,OADAjC,EAAW0C,KAAKD,EAAK1C,UACd4C,MAAM,yBAA2BF,EAAK1C,SAC1CwC,MAAK,SAAAK,GACJ,OAAOA,EAAQC,MACjB,IAAGN,MAAK,SAAAK,GACN,OAAOE,EAAAA,EAAAA,UAASF,EAClB,GAEN,IACCL,MAAK,SAACQ,GACDd,SACUe,IAARD,GACF3C,GAAY,GACZI,GAAW,GACXQ,EAAQ,gBAERZ,GAAY,GACZI,EAAW,WAAWyC,KAAKF,EAAIhC,OAC/BC,EAAQ+B,EAAIhC,OAGlB,IACCmC,OAAM,SAAAC,GACL3B,GAAS,EACX,IACC4B,SAAQ,WACHnB,GACFb,GAAW,EAEf,IAEK,WACLa,GAAU,CACZ,CACF,GAAG,CACDN,EACAJ,IAGEA,GACK8B,EAAAA,EAAAA,KAACC,EAAAA,EAAG,KAIXD,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAC,cAAY,YAAWF,SAAA,EAC1BH,EAAAA,EAAAA,KAACM,EAAAA,EAAc,CACbC,KAAK,aACLjC,IAAKA,KAEP0B,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CACZC,KAAK,OACLnC,IAAKA,EACLoC,MAAO,MAETV,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CACPrD,SAAUA,EACVZ,QAASA,EACTkE,OAAQ9D,EACR+D,MAAO3D,EACPQ,KAAMA,EACN6C,KAAK,aACLzC,QAASA,QAKnB,C","sources":["pages/home/blob.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../components/FileNavigation';\nimport ListDirectory from '../../components/ListDirectory';\nimport FileView from '../../components/FileView';\nimport { useParams } from \"react-router-dom\";\nimport { OctokitInstance } from '../../plugins/Octokit';\nimport { fromBlob, FileTypeResult } from 'file-type/browser';\nimport Moo from '../../components/Moo';\nimport useShaToPath from '../../hooks/useShaToPath'\n\nconst BlobPage = () => {\n  const [ content, setContent ] = React.useState<string>(\"\");\n  const [ isBinary, setIsBinary ] = React.useState<boolean>(false);\n  const [ isImage, setIsImage ] = React.useState<boolean>(false);\n  const [ filename, setFilename ] = React.useState<string>(\"\");\n  const [ mime, setMime ] = React.useState<string>(\"\");\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n  const [ error, setError ] = React.useState<boolean>(false);\n  const { sha = '' } = useParams();\n  const getPathFromSha = useShaToPath();\n\n  React.useEffect(() => {\n    const [ path, err ] = getPathFromSha(sha)\n    if (err) {\n      setError(true);\n    } else {\n      setFilename(path)\n    }\n  }, [\n    getPathFromSha,\n    sha\n  ])\n\n  React.useEffect(() => {\n    let mounted = true;\n    if (error) {\n      return;\n    }\n    OctokitInstance\n      .request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        file_sha: sha\n      })\n      .then(({ data }) => {\n        if (mounted) {\n          setContent(atob(data.content));\n          return fetch(\"data:image/png;base64,\" + data.content)\n            .then(fetched => {\n              return fetched.blob()\n            }).then(fetched => {\n              return fromBlob(fetched)\n            })\n        }\n      })\n      .then((res: FileTypeResult | undefined) => {\n        if (mounted) {\n          if (res === undefined) {\n            setIsBinary(false);\n            setIsImage(false);\n            setMime('text/plain')\n          } else {\n            setIsBinary(true)\n            setIsImage(/^image\\//.test(res.mime))\n            setMime(res.mime)\n          }\n        }\n      })\n      .catch(err => {\n        setError(true)\n      })\n      .finally(() => {\n        if (mounted) {\n          setLoading(false);\n        }\n      })\n\n    return () => {\n      mounted = false;\n    }\n  }, [\n    sha,\n    error\n  ])\n\n  if (error) {\n    return <Moo />\n  }\n\n  return (\n    <>\n      <Box data-testid=\"page-blob\">\n        <FileNavigation\n          mode=\"navigation\"\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"blob\"\n          sha={sha}\n          trees={[]}\n        />\n        <FileView\n          filename={filename}\n          content={content}\n          binary={isBinary}\n          image={isImage}\n          mime={mime}\n          mode=\"sourceCode\"\n          loading={loading}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default BlobPage;\n"],"names":["_React$useState","React","_React$useState2","_slicedToArray","content","setContent","_React$useState3","_React$useState4","isBinary","setIsBinary","_React$useState5","_React$useState6","isImage","setIsImage","_React$useState7","_React$useState8","filename","setFilename","_React$useState9","_React$useState10","mime","setMime","_React$useState11","_React$useState12","loading","setLoading","_React$useState13","_React$useState14","error","setError","_useParams$sha","useParams","sha","getPathFromSha","useShaToPath","_getPathFromSha","_getPathFromSha2","path","mounted","OctokitInstance","owner","process","repo","file_sha","then","_ref","data","atob","fetch","fetched","blob","fromBlob","res","undefined","test","catch","err","finally","_jsx","Moo","_Fragment","children","_jsxs","Box","FileNavigation","mode","ListDirectory","type","trees","FileView","binary","image"],"sourceRoot":""}