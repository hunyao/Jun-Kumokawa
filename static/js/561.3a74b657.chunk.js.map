{"version":3,"file":"static/js/561.3a74b657.chunk.js","mappings":"gQAoHA,UAzGiB,WACf,MAAgCA,EAAAA,SAAuB,IAAG,eAAlDC,EAAO,KAAEC,EAAU,KAC3B,EAAkCF,EAAAA,UAAwB,GAAM,eAAxDG,EAAQ,KAAEC,EAAW,KAC7B,EAAgCJ,EAAAA,UAAwB,GAAM,eAAtDK,EAAO,KAAEC,EAAU,KAC3B,EAAkCN,EAAAA,SAAuB,IAAG,eAApDO,EAAQ,KAAEC,EAAW,KAC7B,EAA0BR,EAAAA,SAAuB,IAAG,eAA5CS,EAAI,KAAEC,EAAO,KACrB,EAAgCV,EAAAA,UAAwB,GAAK,eAArDW,EAAO,KAAEC,EAAU,KAC3B,EAA4BZ,EAAAA,UAAwB,GAAM,eAAlDa,EAAK,KAAEC,EAAQ,KACS,GAAXC,EAAAA,EAAAA,MAAbC,IAAAA,OAAG,MAAG,GAAE,EACVC,GAAiBC,EAAAA,EAAAA,KAkEvB,OAhEAlB,EAAAA,WAAgB,WACd,MAAsBiB,EAAeD,GAAI,eAAjCG,EAAI,KAAK,KAEfL,GAAS,GAETN,EAAYW,EAEhB,GAAG,CACDF,EACAD,IAGFhB,EAAAA,WAAgB,WACd,IAAIoB,GAAU,EACd,IAAIP,EA0CJ,OAvCAQ,EAAAA,EAAAA,QACW,iDAAkD,CACzDC,MAAOC,SACPC,KAAMD,eACNE,SAAUT,IAEXU,MAAK,YAAe,IAAZC,EAAI,EAAJA,KACP,GAAIP,EAEF,OADAlB,EAAW0B,KAAKD,EAAK1B,UACd4B,MAAM,yBAA2BF,EAAK1B,SAC1CyB,MAAK,SAAAI,GACJ,OAAOA,EAAQC,MACjB,IAAGL,MAAK,SAAAI,GACN,OAAOE,EAAAA,EAAAA,UAASF,EAClB,GAEN,IACCJ,MAAK,SAACO,GACDb,SACUc,IAARD,GACF7B,GAAY,GACZE,GAAW,GACXI,EAAQ,gBAERN,GAAY,GACZE,EAAW,WAAW6B,KAAKF,EAAIxB,OAC/BC,EAAQuB,EAAIxB,OAGlB,IACC2B,OAAM,SAAAC,GACLvB,GAAS,EACX,IACCwB,SAAQ,WACHlB,GACFR,GAAW,EAEf,IAEK,WACLQ,GAAU,CACZ,CACF,GAAG,CACDJ,EACAH,IAGEA,GACK,SAAC,IAAG,KAIX,+BACE,UAAC,IAAG,CAAC,cAAY,YAAW,WAC1B,SAAC,IAAc,CACb0B,KAAK,aACLvB,IAAKA,KAEP,SAAC,IAAa,CACZwB,KAAK,OACLxB,IAAKA,EACLyB,MAAO,MAET,SAAC,IAAQ,CACPlC,SAAUA,EACVN,QAASA,EACTyC,OAAQvC,EACRwC,MAAOtC,EACPI,KAAMA,EACN8B,KAAK,aACL5B,QAASA,QAKnB,C","sources":["pages/home/blob.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../components/FileNavigation';\nimport ListDirectory from '../../components/ListDirectory';\nimport FileView from '../../components/FileView';\nimport { useParams } from \"react-router-dom\";\nimport { OctokitInstance } from '../../plugins/Octokit';\nimport { fromBlob, FileTypeResult } from 'file-type/browser';\nimport Moo from '../../components/Moo';\nimport useShaToPath from '../../hooks/useShaToPath'\n\nconst BlobPage = () => {\n  const [ content, setContent ] = React.useState<string>(\"\");\n  const [ isBinary, setIsBinary ] = React.useState<boolean>(false);\n  const [ isImage, setIsImage ] = React.useState<boolean>(false);\n  const [ filename, setFilename ] = React.useState<string>(\"\");\n  const [ mime, setMime ] = React.useState<string>(\"\");\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n  const [ error, setError ] = React.useState<boolean>(false);\n  const { sha = '' } = useParams();\n  const getPathFromSha = useShaToPath();\n\n  React.useEffect(() => {\n    const [ path, err ] = getPathFromSha(sha)\n    if (err) {\n      setError(true);\n    } else {\n      setFilename(path)\n    }\n  }, [\n    getPathFromSha,\n    sha\n  ])\n\n  React.useEffect(() => {\n    let mounted = true;\n    if (error) {\n      return;\n    }\n    OctokitInstance\n      .request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {\n        owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n        repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n        file_sha: sha\n      })\n      .then(({ data }) => {\n        if (mounted) {\n          setContent(atob(data.content));\n          return fetch(\"data:image/png;base64,\" + data.content)\n            .then(fetched => {\n              return fetched.blob()\n            }).then(fetched => {\n              return fromBlob(fetched)\n            })\n        }\n      })\n      .then((res: FileTypeResult | undefined) => {\n        if (mounted) {\n          if (res === undefined) {\n            setIsBinary(false);\n            setIsImage(false);\n            setMime('text/plain')\n          } else {\n            setIsBinary(true)\n            setIsImage(/^image\\//.test(res.mime))\n            setMime(res.mime)\n          }\n        }\n      })\n      .catch(err => {\n        setError(true)\n      })\n      .finally(() => {\n        if (mounted) {\n          setLoading(false);\n        }\n      })\n\n    return () => {\n      mounted = false;\n    }\n  }, [\n    sha,\n    error\n  ])\n\n  if (error) {\n    return <Moo />\n  }\n\n  return (\n    <>\n      <Box data-testid=\"page-blob\">\n        <FileNavigation\n          mode=\"navigation\"\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"blob\"\n          sha={sha}\n          trees={[]}\n        />\n        <FileView\n          filename={filename}\n          content={content}\n          binary={isBinary}\n          image={isImage}\n          mime={mime}\n          mode=\"sourceCode\"\n          loading={loading}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default BlobPage;\n"],"names":["React","content","setContent","isBinary","setIsBinary","isImage","setIsImage","filename","setFilename","mime","setMime","loading","setLoading","error","setError","useParams","sha","getPathFromSha","useShaToPath","path","mounted","OctokitInstance","owner","process","repo","file_sha","then","data","atob","fetch","fetched","blob","fromBlob","res","undefined","test","catch","err","finally","mode","type","trees","binary","image"],"sourceRoot":""}