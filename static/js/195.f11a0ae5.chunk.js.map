{"version":3,"file":"static/js/195.f11a0ae5.chunk.js","mappings":"sPAwFA,UA9EiB,WACf,MAAgCA,EAAAA,SAAe,IAA/C,eAAQC,EAAR,KAAiBC,EAAjB,KACA,EAAkCF,EAAAA,UAAe,GAAjD,eAAQG,EAAR,KAAkBC,EAAlB,KACA,EAAgCJ,EAAAA,UAAe,GAA/C,eAAQK,EAAR,KAAiBC,EAAjB,KACA,EAAkCN,EAAAA,SAAe,IAAjD,eAAQO,EAAR,KAAkBC,EAAlB,KACA,EAA0BR,EAAAA,SAAe,IAAzC,eAAQS,EAAR,KAAcC,EAAd,KACQC,GAAQC,EAAAA,EAAAA,MAARD,IAGNE,EACEb,EAAAA,WAAiBc,EAAAA,mBADnBD,eA6CF,OA1CAb,EAAAA,WAAgB,WACdQ,EAAYK,EAAeF,MAC1B,CACDE,EACAF,IAGFX,EAAAA,WAAgB,WACd,IAAIe,GAAU,EA2Bd,OA1BAC,EAAAA,EAAAA,QAAwB,iDAAkD,CACxEC,MAAOC,SACPC,KAAMD,eACNE,SAAUT,IAEXU,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP,GAAIP,EAAS,CACXb,EAAWqB,KAAKD,EAAKrB,UACrB,IAAMuB,EAAO,IAAIC,KAAK,CAACF,KAAKD,EAAKrB,WACjC,OAAOyB,EAAAA,EAAAA,UAASF,OAGnBH,MAAK,SAACM,GACDZ,SACUa,IAARD,GACFvB,GAAY,GACZE,GAAW,GACXI,EAAQ,gBAERN,GAAY,GACZE,EAAW,WAAWuB,KAAKF,EAAIlB,OAC/BC,EAAQiB,EAAIlB,WAKX,WACLM,GAAU,KAEX,CACDJ,KAIA,+BACE,UAAC,IAAD,YACE,SAAC,IAAD,CACEmB,KAAK,aACLnB,IAAKA,KAEP,SAAC,IAAD,CACEoB,KAAK,OACLpB,IAAKA,KAEP,SAAC,IAAD,CACEJ,SAAUA,EACVN,QAASA,EACT+B,OAAQ7B,EACR8B,MAAO5B,EACPI,KAAMA,EACNqB,KAAK,sB","sources":["pages/home/blob/index.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport FileNavigation from '../../../components/FileNavigation';\nimport ListDirectory from '../../../components/ListDirectory';\nimport FileView from '../../../components/FileView';\nimport { useParams } from \"react-router-dom\";\nimport { OctokitInstance } from '../../../plugins/Octokit';\nimport { fromBlob } from 'file-type/browser';\nimport { repositoryContext } from '../../../contexts/repository';\n\nconst BlobPage = () => {\n  const [ content, setContent ] = React.useState(\"\");\n  const [ isBinary, setIsBinary ] = React.useState(false);\n  const [ isImage, setIsImage ] = React.useState(false);\n  const [ filename, setFilename ] = React.useState(\"\");\n  const [ mime, setMime ] = React.useState(\"\");\n  const { sha } = useParams();\n\n  const {\n    getPathFromSha\n  } = React.useContext(repositoryContext)\n\n  React.useEffect(() => {\n    setFilename(getPathFromSha(sha))\n  }, [\n    getPathFromSha,\n    sha\n  ])\n\n  React.useEffect(() => {\n    let mounted = true;\n    OctokitInstance.request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {\n      owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n      repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n      file_sha: sha as string\n    })\n    .then(({ data }) => {\n      if (mounted) {\n        setContent(atob(data.content));\n        const blob = new Blob([atob(data.content)]);\n        return fromBlob(blob)\n      }\n    })\n    .then((res: any) => {\n      if (mounted) {\n        if (res === undefined) {\n          setIsBinary(false);\n          setIsImage(false);\n          setMime('text/plain')\n        } else {\n          setIsBinary(true)\n          setIsImage(/^image\\//.test(res.mime))\n          setMime(res.mime)\n        }\n      }\n    })\n\n    return () => {\n      mounted = false;\n    }\n  }, [\n    sha\n  ])\n\n  return (\n    <>\n      <Box>\n        <FileNavigation\n          mode=\"navigation\"\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"blob\"\n          sha={sha}\n        />\n        <FileView\n          filename={filename}\n          content={content}\n          binary={isBinary}\n          image={isImage}\n          mime={mime}\n          mode=\"sourceCode\"\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default BlobPage;\n"],"names":["React","content","setContent","isBinary","setIsBinary","isImage","setIsImage","filename","setFilename","mime","setMime","sha","useParams","getPathFromSha","repositoryContext","mounted","OctokitInstance","owner","process","repo","file_sha","then","data","atob","blob","Blob","fromBlob","res","undefined","test","mode","type","binary","image"],"sourceRoot":""}