{"version":3,"file":"static/js/415.51e8ecc3.chunk.js","mappings":"kVAOMA,EAIF,CAAC,EACCC,EAAU,SAACC,EAAgDC,GAC/D,QAAeC,IAAXF,EAAEG,WAAiCD,IAAXF,EAAEI,WAAiCF,IAAXD,EAAEE,WAAiCD,IAAXD,EAAEG,KAC5E,OAAO,EAET,GAAIJ,EAAEG,OAASF,EAAEE,KACf,MAAkB,SAAXH,EAAEG,MAAmB,EAAI,EAElC,IAAME,EAA2B,MAAdL,EAAEI,KAAK,GAE1B,GAAIC,KAD6B,MAAdJ,EAAEG,KAAK,IAExB,OAAOC,GAAc,EAAI,EAE3B,IAAMC,EAAwB,SAASC,KAAKP,EAAEI,MAE9C,OAAIE,IAD0B,SAASC,KAAKN,EAAEG,MAErCE,GAAyB,EAAI,EAG/BN,EAAEI,KAAOH,EAAEG,MAAQ,EAAI,CAChC,EACMI,EAAO,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAaC,GAAkB,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGnD,QAF6BjB,IAA1BJ,EAAUiB,KACZjB,EAAUiB,GAAc,CAAC,QAEQb,IAA/BJ,EAAUiB,GAAYD,GAAkB,CAAAG,EAAAE,KAAA,eAAAF,EAAAG,OAAA,SACnCtB,EAAUiB,GAAYD,IAAI,cAAAG,EAAAG,OAAA,SAE5BC,EAAAA,EAAAA,QAAwB,iDAAkD,CAC/EC,MAAOC,SACPC,KAAMD,eACNE,SAAUX,IAEXY,MAAK,SAAAC,GAAoD,IAAjDC,EAAID,EAAJC,KAGP,OAFAA,EAAKC,KAAKC,KAAK/B,GACfD,EAAUiB,GAAYD,GAAOc,EAAKC,KAC3BD,EAAKC,IACd,KAAE,wBAAAZ,EAAAc,OAAA,GAAAlB,EAAA,KACH,gBAjBYmB,EAAAC,GAAA,OAAAxB,EAAAyB,MAAA,KAAAC,UAAA,KAwEb,EAjDsD,WAAuB,IAAtBrB,EAAWqB,UAAAC,OAAA,QAAAlC,IAAAiC,UAAA,GAAAA,UAAA,GAAG,GACnEE,EAA0BC,EAAAA,SAAkD,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvER,EAAIU,EAAA,GAAEE,EAAOF,EAAA,GACrBG,EAA4BJ,EAAAA,UAAwB,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAlDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACvBG,EAAgCR,EAAAA,UAAwB,GAAKS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAArDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC3BG,GAA8BC,EAAAA,EAAAA,KAAtBC,GAAwCZ,EAAAA,EAAAA,GAAAU,EAAA,GAAvB,GACjBG,EAAaf,EAAAA,WAAiBgB,EAAAA,mBAA9BD,SAqCR,OAnCAf,EAAAA,WAAgB,WACd,GAAY,KAARxB,GAIJ,GAAiB,OAAbuC,EAGJ,OAAIA,EAASvC,MAAQA,GAAQuC,EAASxB,KAAK0B,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,MAAQA,CAAG,SAMlEN,EAAQM,EAAKsC,GACZ1B,MAAK,SAACE,GACLa,GAAQ,WACN,OAAAgB,EAAAA,EAAAA,GACK7B,EAEP,GACF,IACC8B,OAAM,WACLjB,EAAQ,IACRI,GAAS,EACX,IACCc,SAAQ,WACPV,GAAW,EACb,KAnBER,EAAQ,IACRI,GAAS,QACTI,GAAW,SATXA,GAAW,EA2Bf,GAAG,CACDnC,EACAsC,EACAC,IAGK,CACLxB,EACAe,EACAI,EAEJ,E,UC3FMY,EAA6C,CAAC,EAC9CC,EAAa,eAAApD,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAT,EAAAgD,EAAAU,EAAA3B,UAAA,OAAAxB,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAmD,GAAzBiC,EAAyBU,EAAA1B,OAAA,EAAA0B,EAAA,QAAA5D,OACzCA,IAA1B0D,EADuBxD,EAAY0D,EAAA1B,OAAA,QAAAlC,IAAA4D,EAAA,GAAAA,EAAA,GAAG,IACH,CAAA7C,EAAAE,KAAA,eAAAF,EAAAG,OAAA,SAC9BwC,EAAgBxD,IAAK,cAAAa,EAAAG,OAAA,SAEvBC,EAAAA,EAAAA,QAAwB,oDAAqD,CAClFC,MAAOC,SACPC,KAAMD,eACNnB,KAAMA,EACN2D,IAAKX,IAEN1B,MAAK,SAAAC,GAAgE,IAA7DC,EAAID,EAAJC,KAEP,OADAgC,EAAgBxD,GAAQwB,EAAKoC,QACtBpC,EAAKoC,OACd,KAAE,wBAAA/C,EAAAc,OAAA,GAAAlB,EAAA,KACH,kBAdkB,OAAAJ,EAAAyB,MAAA,KAAAC,UAAA,KA0DnB,EA3CkE,WAAuB,IAAtBrB,EAAWqB,UAAAC,OAAA,QAAAlC,IAAAiC,UAAA,GAAAA,UAAA,GAAG,GAC/EE,EAAgCC,EAAAA,SAAuB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlD2B,EAAOzB,EAAA,GAAE0B,EAAU1B,EAAA,GAC3BG,EAA4BJ,EAAAA,UAAwB,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAlDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEvBuB,GADuBC,EAAAA,EAAAA,IACDC,CAAetD,GAAIuD,GAAA7B,EAAAA,EAAAA,GAAA0B,EAAA,GAAjC9D,EAAIiE,EAAA,GAAEC,EAAGD,EAAA,GACjBnB,GAA8BC,EAAAA,EAAAA,KAAtBC,GAAwCZ,EAAAA,EAAAA,GAAAU,EAAA,GAAvB,GACzBJ,EAAgCR,EAAAA,UAAwB,GAAKS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAArDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GA8B3B,OA5BAT,EAAAA,WAAgB,WACd,GAAY,KAARxB,EAIJ,OAAIwD,GACFzB,GAAS,QACTI,GAAW,SAGbY,EAAczD,EAAMgD,GACnB1B,MAAK,SAAAE,GACJqC,EAAWM,KAAK3C,GAClB,IACC8B,OAAM,SAAAc,GAAa,IAAXC,EAAID,EAAJC,KACPR,EAAW,IACXpB,EAAkB,MAAT4B,EACX,IACCd,SAAQ,WACPV,GAAW,EACb,IAlBEA,GAAW,EAmBf,GAAG,CACDnC,EACAV,EACAkE,EACAlB,IAGK,CACLY,EACApB,EACAI,EAEJ,E,iCCKA,EAzDmD,SAAC0B,GAClD,IAAMC,GAASC,EAAAA,EAAAA,MACfvC,EAAwBC,EAAAA,SAAuB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CvB,EAAGyB,EAAA,GAAEsC,EAAMtC,EAAA,GACnBuC,EAA2CC,EAAQjE,GAAIkE,GAAAxC,EAAAA,EAAAA,GAAAsC,EAAA,GAA/CG,EAAKD,EAAA,GAAEE,EAAUF,EAAA,GAAEG,EAAWH,EAAA,GACtCI,EAAoEC,EAAcvE,GAAIwE,GAAA9C,EAAAA,EAAAA,GAAA4C,EAAA,GAA9EG,EAAaD,EAAA,GAAEE,EAAkBF,EAAA,GAAEG,EAAoBH,EAAA,GAC/DpC,GAA+BC,EAAAA,EAAAA,KAArBuC,GAAuClD,EAAAA,EAAAA,GAAAU,EAAA,GAAvB,GAE1ByC,EAGIjB,EAFFkB,KAAAA,OAAI,IAAAD,EAAG,aAAYA,EAChBE,GAAIC,EAAAA,EAAAA,GACLpB,EAAKqB,GAaT,OAXAzD,EAAAA,WAAgB,gBACKpC,IAAfyE,EAAO7D,IACT+D,EAAOa,GAEPb,EAAOF,EAAO7D,IAElB,GAAG,CACD4E,EACAf,IAGEO,GAAcM,GACTQ,EAAAA,EAAAA,KAACC,EAAAA,EAAG,KAGXD,EAAAA,EAAAA,KAACE,EAAAA,EAAO,CAAClD,QAASmC,EAAYgB,UAC5BC,EAAAA,EAAAA,MAACC,EAAAA,GAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACF,cAAY,aACRT,GAAI,IAAAM,SAAA,EAERH,EAAAA,EAAAA,KAACO,EAAAA,EAAc,CACbX,KAAMA,EACN9E,IAAKA,KAEPkF,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CACZrG,KAAK,OACLW,IAAKA,EACLmE,MAAOA,KAETe,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,CACPC,SAAS,YACT1C,QAASuB,GAAiB,GAC1BoB,QAAQ,EACRC,OAAO,EACPhB,KAAK,SACLiB,GAAI,CACFC,QAA2B,KAAlBvB,EAAuB,UAAY,QAE9CvC,QAASyC,SAKnB,C","sources":["hooks/useTree.tsx","hooks/useTreeReadme.tsx","pages/home/tree.tsx"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport { Unpacked } from '../contexts/repository';\nimport { GithubGetTreeResponseType } from '../contexts/repository';\nimport useCurrentBranch from '../hooks/useCurrentBranch'\nimport { repositoryContext } from '../contexts/repository';\n\nconst treeCache: {\n  [branchName: string]: {\n    [key: string]: GithubGetTreeResponseType['tree']\n  }\n} = {}\nconst sorting = (a: Unpacked<GithubGetTreeResponseType['tree']>, b: Unpacked<GithubGetTreeResponseType['tree']>) => {\n  if (a.type === undefined || a.path === undefined || b.type === undefined || b.path === undefined) {\n    return 0;\n  }\n  if (a.type !== b.type) {\n    return a.type === \"tree\" ? -1 : 1;\n  }\n  const isDotFileA = a.path[0] === '.';\n  const isDotFileB = b.path[0] === '.';\n  if (isDotFileA !== isDotFileB) {\n    return isDotFileA ? -1 : 1;\n  }\n  const isStartWithUpperCaseA = /^[A-Z]/.test(a.path);\n  const isStartWithUpperCaseB = /^[A-Z]/.test(b.path);\n  if (isStartWithUpperCaseA !== isStartWithUpperCaseB) {\n    return isStartWithUpperCaseA ? -1 : 1;\n  }\n\n  return a.path < b.path ? -1 : 1;\n}\nconst getTree = async (sha: string, branchName: string) => {\n  if (treeCache[branchName] === undefined) {\n    treeCache[branchName] = {};\n  }\n  if (treeCache[branchName][sha] !== undefined) {\n    return treeCache[branchName][sha]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    tree_sha: sha\n  })\n  .then(({ data }: { data: GithubGetTreeResponseType }) => {\n    data.tree.sort(sorting)\n    treeCache[branchName][sha] = data.tree\n    return data.tree\n  })\n}\ntype useTreeResponseType = [\n  GithubGetTreeResponseType['tree'],\n  boolean,\n  boolean\n]\nconst useTree: (sha: string) => useTreeResponseType = (sha: string = '') => {\n  const [ tree, setTree ] = React.useState<GithubGetTreeResponseType['tree']>([]);\n  const [ error, setError ] = React.useState<boolean>(false);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n  const [ currentBranchName ] = useCurrentBranch();\n  const { allTrees } = React.useContext(repositoryContext);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (allTrees === null) {\n      return;\n    }\n    if (allTrees.sha !== sha && !allTrees.tree.find(t => t.sha === sha)) {\n      setTree([]);\n      setError(true)\n      setLoading(false);\n      return;\n    }\n    getTree(sha, currentBranchName)\n    .then((data: GithubGetTreeResponseType['tree']) => {\n      setTree(() => {\n        return [\n          ...data\n        ]\n      })\n    })\n    .catch(() => {\n      setTree([]);\n      setError(true)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [\n    sha,\n    currentBranchName,\n    allTrees\n  ])\n\n  return [\n    tree,\n    error,\n    loading\n  ]\n}\n\nexport default useTree\n","import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport useShaToPath from './useShaToPath';\nimport useCurrentBranch from './useCurrentBranch'\nimport { GithubGetRepositoryReadmeResponseType } from '../contexts/repository'\n\ntype useTreeReadmeResponseType = [\n  string,\n  boolean,\n  boolean\n]\nconst treeReadmeCache: { [key: string]: string } = {}\nconst getTreeReadme = async (path: string = '', currentBranchName: string) => {\n  if (treeReadmeCache[path] !== undefined) {\n    return treeReadmeCache[path]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/readme/{path}?ref={ref}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    path: path,\n    ref: currentBranchName\n  })\n  .then(({ data }: { data: GithubGetRepositoryReadmeResponseType }) => {\n    treeReadmeCache[path] = data.content;\n    return data.content\n  })\n}\nconst useTreeReadme: (sha: string) => useTreeReadmeResponseType = (sha: string = '') => {\n  const [ content, setContent ] = React.useState<string>('');\n  const [ error, setError ] = React.useState<boolean>(false);\n  const getPathFromSha = useShaToPath();\n  const [ path, err ] = getPathFromSha(sha);\n  const [ currentBranchName ] = useCurrentBranch();\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (err) {\n      setError(true)\n      setLoading(false);\n      return;\n    }\n    getTreeReadme(path, currentBranchName)\n    .then(data => {\n      setContent(atob(data))\n    })\n    .catch(({code}) => {\n      setContent('')\n      setError(code !== 404)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [\n    sha,\n    path,\n    err,\n    currentBranchName,\n  ])\n\n  return [\n    content,\n    error,\n    loading\n  ]\n}\n\nexport default useTreeReadme\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport { BoxProps } from '@mui/material/Box';\nimport FileNavigation from '../../components/FileNavigation';\nimport ListDirectory from '../../components/ListDirectory';\nimport { useParams } from \"react-router-dom\";\nimport FileView from '../../components/FileView';\nimport Moo from '../../components/Moo'\nimport useCurrentBranch from '../../hooks/useCurrentBranch'\nimport useTree from '../../hooks/useTree'\nimport useTreeReadme from '../../hooks/useTreeReadme'\nimport Loading from '../../components/Loading'\n\ninterface TreeProps {\n  mode?: 'navigation' | 'overview'\n}\nconst Tree: React.FC<BoxProps<'div', TreeProps>> = (props) => {\n  const params = useParams();\n  const [ sha, setSha ] = React.useState<string>('');\n  const [ trees, treesError, treeLoading ] = useTree(sha);\n  const [ readmeContent, readmeContentError, readmeContentLoading ] = useTreeReadme(sha);\n  const [ , currentBranchSha ] = useCurrentBranch();\n\n  const {\n    mode = 'navigation',\n    ...rest\n  } = props;\n\n  React.useEffect(() => {\n    if (params.sha === undefined) {\n      setSha(currentBranchSha)\n    } else {\n      setSha(params.sha)\n    }\n  }, [\n    currentBranchSha,\n    params\n  ])\n\n  if (treesError || readmeContentError) {\n    return <Moo />\n  }\n  return (\n    <Loading loading={treeLoading}>\n      <Box\n        data-testid=\"page-tree\"\n        {...rest}\n      >\n        <FileNavigation\n          mode={mode}\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"tree\"\n          sha={sha}\n          trees={trees}\n        />\n        <FileView\n          filename=\"README.md\"\n          content={readmeContent || \"\"}\n          binary={false}\n          image={false}\n          mode=\"readme\"\n          sx={{\n            display: readmeContent !== '' ? 'inherit' : 'none'\n          }}\n          loading={readmeContentLoading}\n        />\n      </Box>\n    </Loading>\n  )\n}\n\nexport default Tree;\n"],"names":["treeCache","sorting","a","b","undefined","type","path","isDotFileA","isStartWithUpperCaseA","test","getTree","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sha","branchName","wrap","_context","prev","next","abrupt","OctokitInstance","owner","process","repo","tree_sha","then","_ref2","data","tree","sort","stop","_x","_x2","apply","arguments","length","_React$useState","React","_React$useState2","_slicedToArray","setTree","_React$useState3","_React$useState4","error","setError","_React$useState5","_React$useState6","loading","setLoading","_useCurrentBranch","useCurrentBranch","currentBranchName","allTrees","repositoryContext","find","t","_toConsumableArray","catch","finally","treeReadmeCache","getTreeReadme","_args","ref","content","setContent","_getPathFromSha","useShaToPath","getPathFromSha","_getPathFromSha2","err","atob","_ref3","code","props","params","useParams","setSha","_useTree","useTree","_useTree2","trees","treesError","treeLoading","_useTreeReadme","useTreeReadme","_useTreeReadme2","readmeContent","readmeContentError","readmeContentLoading","currentBranchSha","_props$mode","mode","rest","_objectWithoutProperties","_excluded","_jsx","Moo","Loading","children","_jsxs","Box","_objectSpread","FileNavigation","ListDirectory","FileView","filename","binary","image","sx","display"],"sourceRoot":""}