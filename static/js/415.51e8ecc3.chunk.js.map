{"version":3,"file":"static/js/415.51e8ecc3.chunk.js","mappings":"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","sources":["hooks/useTree.tsx","hooks/useTreeReadme.tsx","pages/home/tree.tsx"],"sourcesContent":["import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport { Unpacked } from '../contexts/repository';\nimport { GithubGetTreeResponseType } from '../contexts/repository';\nimport useCurrentBranch from '../hooks/useCurrentBranch'\nimport { repositoryContext } from '../contexts/repository';\n\nconst treeCache: {\n  [branchName: string]: {\n    [key: string]: GithubGetTreeResponseType['tree']\n  }\n} = {}\nconst sorting = (a: Unpacked<GithubGetTreeResponseType['tree']>, b: Unpacked<GithubGetTreeResponseType['tree']>) => {\n  if (a.type === undefined || a.path === undefined || b.type === undefined || b.path === undefined) {\n    return 0;\n  }\n  if (a.type !== b.type) {\n    return a.type === \"tree\" ? -1 : 1;\n  }\n  const isDotFileA = a.path[0] === '.';\n  const isDotFileB = b.path[0] === '.';\n  if (isDotFileA !== isDotFileB) {\n    return isDotFileA ? -1 : 1;\n  }\n  const isStartWithUpperCaseA = /^[A-Z]/.test(a.path);\n  const isStartWithUpperCaseB = /^[A-Z]/.test(b.path);\n  if (isStartWithUpperCaseA !== isStartWithUpperCaseB) {\n    return isStartWithUpperCaseA ? -1 : 1;\n  }\n\n  return a.path < b.path ? -1 : 1;\n}\nconst getTree = async (sha: string, branchName: string) => {\n  if (treeCache[branchName] === undefined) {\n    treeCache[branchName] = {};\n  }\n  if (treeCache[branchName][sha] !== undefined) {\n    return treeCache[branchName][sha]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    tree_sha: sha\n  })\n  .then(({ data }: { data: GithubGetTreeResponseType }) => {\n    data.tree.sort(sorting)\n    treeCache[branchName][sha] = data.tree\n    return data.tree\n  })\n}\ntype useTreeResponseType = [\n  GithubGetTreeResponseType['tree'],\n  boolean,\n  boolean\n]\nconst useTree: (sha: string) => useTreeResponseType = (sha: string = '') => {\n  const [ tree, setTree ] = React.useState<GithubGetTreeResponseType['tree']>([]);\n  const [ error, setError ] = React.useState<boolean>(false);\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n  const [ currentBranchName ] = useCurrentBranch();\n  const { allTrees } = React.useContext(repositoryContext);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (allTrees === null) {\n      return;\n    }\n    if (allTrees.sha !== sha && !allTrees.tree.find(t => t.sha === sha)) {\n      setTree([]);\n      setError(true)\n      setLoading(false);\n      return;\n    }\n    getTree(sha, currentBranchName)\n    .then((data: GithubGetTreeResponseType['tree']) => {\n      setTree(() => {\n        return [\n          ...data\n        ]\n      })\n    })\n    .catch(() => {\n      setTree([]);\n      setError(true)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [\n    sha,\n    currentBranchName,\n    allTrees\n  ])\n\n  return [\n    tree,\n    error,\n    loading\n  ]\n}\n\nexport default useTree\n","import React from 'react';\nimport { OctokitInstance } from '../plugins/Octokit';\nimport useShaToPath from './useShaToPath';\nimport useCurrentBranch from './useCurrentBranch'\nimport { GithubGetRepositoryReadmeResponseType } from '../contexts/repository'\n\ntype useTreeReadmeResponseType = [\n  string,\n  boolean,\n  boolean\n]\nconst treeReadmeCache: { [key: string]: string } = {}\nconst getTreeReadme = async (path: string = '', currentBranchName: string) => {\n  if (treeReadmeCache[path] !== undefined) {\n    return treeReadmeCache[path]\n  }\n  return OctokitInstance.request('GET /repos/{owner}/{repo}/readme/{path}?ref={ref}', {\n    owner: process.env.REACT_APP_REPOSITORY_OWNER as string,\n    repo: process.env.REACT_APP_REPOSITORY_NAME as string,\n    path: path,\n    ref: currentBranchName\n  })\n  .then(({ data }: { data: GithubGetRepositoryReadmeResponseType }) => {\n    treeReadmeCache[path] = data.content;\n    return data.content\n  })\n}\nconst useTreeReadme: (sha: string) => useTreeReadmeResponseType = (sha: string = '') => {\n  const [ content, setContent ] = React.useState<string>('');\n  const [ error, setError ] = React.useState<boolean>(false);\n  const getPathFromSha = useShaToPath();\n  const [ path, err ] = getPathFromSha(sha);\n  const [ currentBranchName ] = useCurrentBranch();\n  const [ loading, setLoading ] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (sha === '') {\n      setLoading(false);\n      return;\n    }\n    if (err) {\n      setError(true)\n      setLoading(false);\n      return;\n    }\n    getTreeReadme(path, currentBranchName)\n    .then(data => {\n      setContent(atob(data))\n    })\n    .catch(({code}) => {\n      setContent('')\n      setError(code !== 404)\n    })\n    .finally(() => {\n      setLoading(false)\n    })\n  }, [\n    sha,\n    path,\n    err,\n    currentBranchName,\n  ])\n\n  return [\n    content,\n    error,\n    loading\n  ]\n}\n\nexport default useTreeReadme\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport { BoxProps } from '@mui/material/Box';\nimport FileNavigation from '../../components/FileNavigation';\nimport ListDirectory from '../../components/ListDirectory';\nimport { useParams } from \"react-router-dom\";\nimport FileView from '../../components/FileView';\nimport Moo from '../../components/Moo'\nimport useCurrentBranch from '../../hooks/useCurrentBranch'\nimport useTree from '../../hooks/useTree'\nimport useTreeReadme from '../../hooks/useTreeReadme'\nimport Loading from '../../components/Loading'\n\ninterface TreeProps {\n  mode?: 'navigation' | 'overview'\n}\nconst Tree: React.FC<BoxProps<'div', TreeProps>> = (props) => {\n  const params = useParams();\n  const [ sha, setSha ] = React.useState<string>('');\n  const [ trees, treesError, treeLoading ] = useTree(sha);\n  const [ readmeContent, readmeContentError, readmeContentLoading ] = useTreeReadme(sha);\n  const [ , currentBranchSha ] = useCurrentBranch();\n\n  const {\n    mode = 'navigation',\n    ...rest\n  } = props;\n\n  React.useEffect(() => {\n    if (params.sha === undefined) {\n      setSha(currentBranchSha)\n    } else {\n      setSha(params.sha)\n    }\n  }, [\n    currentBranchSha,\n    params\n  ])\n\n  if (treesError || readmeContentError) {\n    return <Moo />\n  }\n  return (\n    <Loading loading={treeLoading}>\n      <Box\n        data-testid=\"page-tree\"\n        {...rest}\n      >\n        <FileNavigation\n          mode={mode}\n          sha={sha}\n        />\n        <ListDirectory\n          type=\"tree\"\n          sha={sha}\n          trees={trees}\n        />\n        <FileView\n          filename=\"README.md\"\n          content={readmeContent || \"\"}\n          binary={false}\n          image={false}\n          mode=\"readme\"\n          sx={{\n            display: readmeContent !== '' ? 'inherit' : 'none'\n          }}\n          loading={readmeContentLoading}\n        />\n      </Box>\n    </Loading>\n  )\n}\n\nexport default Tree;\n"],"names":["treeCache","sorting","a","b","undefined","type","path","isDotFileA","isStartWithUpperCaseA","test","getTree","sha","branchName","OctokitInstance","owner","process","repo","tree_sha","then","data","tree","sort","React","setTree","error","setError","loading","setLoading","useCurrentBranch","currentBranchName","allTrees","repositoryContext","find","t","catch","finally","treeReadmeCache","getTreeReadme","ref","content","setContent","useShaToPath","getPathFromSha","err","atob","code","props","params","useParams","setSha","useTree","trees","treesError","treeLoading","useTreeReadme","readmeContent","readmeContentError","readmeContentLoading","currentBranchSha","mode","rest","Moo","Loading","Box","FileNavigation","ListDirectory","FileView","filename","binary","image","sx","display"],"sourceRoot":""}